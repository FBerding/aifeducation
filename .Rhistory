dir.create(testthat::test_path("test_artefacts/tmp/3_classes"))
}
folder_list=c("keras","pytorch")
for (folder in folder_list){
if(dir.exists(testthat::test_path(paste0("test_artefacts/tmp_full_models_",folder)))==FALSE){
dir.create(testthat::test_path(paste0("test_artefacts/tmp_full_models_",folder)))
}
if(dir.exists(testthat::test_path(paste0("test_artefacts/tmp_",folder)))==FALSE){
dir.create(testthat::test_path(paste0("test_artefacts/tmp_",folder)))
}
if(dir.exists(testthat::test_path(paste0("test_artefacts/tmp_",folder,"/2_classes")))==FALSE){
dir.create(testthat::test_path(paste0("test_artefacts/tmp_",folder,"/2_classes")))
}
if(dir.exists(testthat::test_path(paste0("test_artefacts/tmp_",folder,"/3_classes")))==FALSE){
dir.create(testthat::test_path(paste0("test_artefacts/tmp_",folder,"/3_classes")))
}
}
ml_frameworks=c("tensorflow","pytorch")
#-------------------------------------------------------------------------------
aifeducation::set_config_gpu_low_memory()
load(testthat::test_path(path))
current_embeddings<-bert_embeddings$clone(deep = TRUE)
n_classes=2
example_data<-data.frame(
id=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$id2,
label=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$sentiment)
example_data$text<-as.character(quanteda.textmodels::data_corpus_moviereviews)
example_data$label<-as.character(example_data$label)
rownames(example_data)<-example_data$id
example_data<-example_data[intersect(
rownames(example_data),rownames(current_embeddings$embeddings)),]
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
framework="pytorch"
#-------------------------------------------------------------------------------
classifier<-NULL
classifier<-TextEmbeddingClassifierNeuralNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=NULL,
rec=c(3,3),
self_attention_heads = 0,
attention_type = "fourier",
recurrent_dropout=0.4,
optimizer="adam")
expect_no_error(
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_n_test_samples=2,
balance_class_weights=TRUE,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=FALSE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
use_bpl=FALSE,
bpl_max_steps=2,
bpl_epochs_per_step=1,
bpl_dynamic_inc=FALSE,
bpl_balance=TRUE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0.02,
bpl_weight_start=0.00,
bpl_model_reset=FALSE,
sustain_track=TRUE,
sustain_iso_code = "DEU",
epochs=2,
batch_size=4,
dir_checkpoint=testthat::test_path("test_artefacts/classifier"),
trace=FALSE,
keras_trace=0,
pytorch_trace=0,
n_cores=1)
)
conf_matrix
devtools::load_all()
classifier<-TextEmbeddingClassifierNeuralNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=NULL,
rec=c(3,3),
self_attention_heads = 0,
attention_type = "fourier",
recurrent_dropout=0.4,
optimizer="adam")
expect_no_error(
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_n_test_samples=2,
balance_class_weights=TRUE,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=FALSE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
use_bpl=FALSE,
bpl_max_steps=2,
bpl_epochs_per_step=1,
bpl_dynamic_inc=FALSE,
bpl_balance=TRUE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0.02,
bpl_weight_start=0.00,
bpl_model_reset=FALSE,
sustain_track=TRUE,
sustain_iso_code = "DEU",
epochs=2,
batch_size=4,
dir_checkpoint=testthat::test_path("test_artefacts/classifier"),
trace=FALSE,
keras_trace=0,
pytorch_trace=0,
n_cores=1)
)
devtools::load_all()
classifier<-TextEmbeddingClassifierNeuralNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=NULL,
rec=c(3,3),
self_attention_heads = 0,
attention_type = "fourier",
recurrent_dropout=0.4,
optimizer="adam")
expect_no_error(
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_n_test_samples=2,
balance_class_weights=TRUE,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=FALSE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
use_bpl=FALSE,
bpl_max_steps=2,
bpl_epochs_per_step=1,
bpl_dynamic_inc=FALSE,
bpl_balance=TRUE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0.02,
bpl_weight_start=0.00,
bpl_model_reset=FALSE,
sustain_track=TRUE,
sustain_iso_code = "DEU",
epochs=2,
batch_size=4,
dir_checkpoint=testthat::test_path("test_artefacts/classifier"),
trace=FALSE,
keras_trace=0,
pytorch_trace=0,
n_cores=1)
)
classifier$reliability$standard_measures_end
classifier$reliability$test_metric_mean
devtools::document()
devtools::build_site()
devtools::test_active_file()
devtools::document()
devtools::check_win_release()
devtools::document()
devtools::check_win_release()
n_folds=2
n_epochs=50
is(c(50),"try-error")
is("try-error","try-error")
devtools::document()
devtools::check_win_release()
devtools::load_all()
start_aifeducation_studio()
reticulate::py_available(T)
start_aifeducation_studio()
reticulate::py_available(T)
devtools::load_all()
start_aifeducation_studio()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::document()
devtools::check_win_release()
reticulate::py_available(T)
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
reticulate::py_available(T)
devtools::load_all()
devtools::test_active_file()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
devtools::check()
#Exporting Functions for Python
#These functions must be available in the global environment
#py_update_aifeducation_progress_bar_epochs<<-
reticulate::py_func(update_aifeducation_progress_bar_epochs)
devtools::load_all()
start_aifeducation_studio()
start_aifeducation_studio()
reticulate::repl_python()
r
r.
#Exporting Functions for Python
#These functions must be available in the global environment
py_update_aifeducation_progress_bar_epochs<-reticulate::py_func(update_aifeducation_progress_bar_epochs)
quit
exit
#Exporting Functions for Python
#These functions must be available in the global environment
py_update_aifeducation_progress_bar_epochs<-reticulate::py_func(update_aifeducation_progress_bar_epochs)
reticulate::repl_python()
r.py_update_aifeducation_progress_bar_epochs
devtools::load_all()
start_aifeducation_studio()
reticulate::py_available(T)
devtools::load_all()
py_to_r_func["A"]<-reticulate::py_func(update_aifeducation_progress_bar_epochs)
py_to_r_func["A"]<-NULL
py_to_r_func<-NULL
py_to_r_func["A"]<-reticulate::py_func(update_aifeducation_progress_bar_epochs)
py_to_r_func["A"]<-list(reticulate::py_func(update_aifeducation_progress_bar_epochs))
py_to_r_func
reticulate::repl_python()
r.__dir__
r.__dir__()
dir(r)
r.py_to_r_func
r.py_to_r_func.A
r.py_to_r_func.[A]
r.py_to_r_func.["A"]
r.py_to_r_func["A"]
exit
devtools::load_all()
aifeducation_config$set_gui_update_functions()
reticulate::repl_python()
r.aifeducation_config
exit
devtools::load_all()
aifeducation_config$set_gui_update_functions()
reticulate::repl_python()
r.aifeducation_config.gui_update_func_epoch
r.aifeducation_config["gui_update_func_epoch"]
r.aifeducation_config
r.aifeducation_config.gui_update_func_epoch
r.aifeducation_config
r.aifeducation_config.self
r.aifeducation_config
r.aifeducation_config["gui_update_func_epoch"]
r.aifeducation_config
help(r.aifeducation_config)
dir(r.aifeducation_config)
r.aifeducation_config
r.aifeducation_config.
r.aifeducation_config()
r.aifeducation_config.gui_update_func_epoch
r.aifeducation_config[gui_update_func_epoch]
exit
aifeducation_config$gui_update_func_step()
reticulate::repl_python()
r.aifeducation_config.gui_update_func_step()
View(r)
get_attr(r)
dir(r)
r.__getattribute__
r.aifeducation_config.__getattribute__
r.aifeducation_config.
r.aifeducation_config
r.aifeducation_config.self
r.aifeducation_config.
r.aifeducation_config.public
r.aifeducation_config["public"]
quit
aifeducation_gui_update_fct<-new.env()
aifeducation_gui_update_fct<-new.env(
steps=NULL
epochs=NULL
aifeducation_gui_update_fct<-new.env()
aifeducation_gui_update_fct
aifeducation_gui_update_fct$step=NULL
aifeducation_gui_update_fct$step
devtools::load_all()
aifeducation_gui_update_fct$step=reticulate::py_func(update_aifeducation_progress_bar_epochs)
reticulate::repl_python()
r.aifeducation_gui_update_fct
r.aifeducation_gui_update_fct.step
r.aifeducation_gui_update_fct.step()
r.aifeducation_gui_update_fct
r.aifeducation_gui_update_fct$step
r.py_update_aifeducation_progress_bar_epochs
r.aifeducation_gui_update_fct["step"]
r.aifeducation_gui_update_fct
r.aifeducation_gui_update_fct()
r.__dir__
r.__dir__()
r.__dict__()
r.__dict__
r.__info__
dir(r)
abc<-r.aifeducation_gui_update_fct
abc=r.aifeducation_gui_update_fct
abc$
dir(abc)
class(abc)
abv.__class__
abc.__class__
abc.__le__
exit
aifeducation_gui_update_fct
aifeducation_gui_update_fct()
aifeducation_gui_update_fct$step()
reticulate::py_available(T)
devtools::load_all()
is.null(py_update_aifeducation_progress_bar_epochs)
py_update_aifeducation_progress_bar_epochs
devtools::load_all()
start_aifeducation_studio()
globalenv()
reticulate::py_available(T)
devtools::load_all()
start_aifeducation_studio()
reticulate::py_available(T)
devtools::load_all()
start_aifeducation_studio()
devtools::check()
devtools::document()
devtools::document()
devtools::check_win_devel()
devtools::document()
?TextEmbeddingClassifierNeuralNet
devtools::check()
shinyWidgets::updateProgressBar
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
reticulate::py_available(T)
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
reticulate::py_available(T)
devtools::load_all
devtools::load_all()
start_aifeducation_studio()
devtools::document()
devtools::test_active_file()
devtools::load_all()
reticulate::py_available(T)
start_aifeducation_studio()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
load("C:/Users/WissMit/Desktop/aifeducation_test_files/text_collection.rda")
head(text_corpus)
colnames(text_corpus)
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
Q
model=load_ai_model(model_dir = "C:/Users/WissMit/Desktop/aifeducation_test_files/interfaces/pytorch/deberta/deberta_test_model")
model=load_ai_model(model_dir = "C:/Users/WissMit/Desktop/aifeducation_test_files/interfaces/pytorch/deberta/deberta_test_model",ml_framework = "pytorch")
embeddings=model$embed(
raw_text=text_corpus$text,
doc_id=text_corpus$id,
batch_size=input$lm_embed_batch_size,
trace=TRUE)
embeddings=model$embed(
raw_text=text_corpus$text,
doc_id=text_corpus$id,
batch_size=8,
trace=TRUE)
install.packages(c("ggplot2", "rlang"))
install.packages("rlang")
devtools::load_all()
reticulate::py_available(T)
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
devtools::document()
start_aifeducation_studio()
devtools::document()
devtools::load_all()
start_aifeducation_studio()
devtools::document()
devtools::document()
devtools::load_all()
start_aifeducation_studio()
devtools::document()
devtools::load_all()
start_aifeducation_studio()
devtools::load_all()
start_aifeducation_studio()
reti
reticulate::py_available(T)
devtools::document()
devtools::load_all()
start_aifeducation_studio()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
start_aifeducation_studio()
plot_data=matrix(nrow = 2,ncol = 3)
colnames(plot_data)=c("score","token","token_str")
plot_data[1,1]=0.5
plot_data[1,2]=0.25
plot_data[1,3]="A"
plot_data[2,3]="B"
plot_data[2,1]=0.25
plot_data
plot_data[1,2]="_A"
plot_data[2,2]="_B"
plot_data<-as.data.frame(plot_data)
create_fill_mask_plot(plot_data = plot_data,10)
print(create_fill_mask_plot(plot_data = plot_data,10))
rlang::last_trace()
print(create_fill_mask_plot(plot_data = plot_data,10))
plot=ggplot2::ggplot(data = plot_data)+
ggplot2::geom_col(ggplot2::aes(x=rlang::.data$token_str,
y=rlang::.data$score))+
ggplot2::coord_flip()+
ggplot2::xlab("tokens")+
ggplot2::ylab("score")+
ggplot2::theme_classic()+
ggplot2::theme(text = ggplot2::element_text(size = lm_mask_plot_text_size))
plot=ggplot2::ggplot(data = plot_data)+
ggplot2::geom_col(ggplot2::aes(x=rlang::.data$token_str,
y=rlang::.data$score))+
ggplot2::coord_flip()+
ggplot2::xlab("tokens")+
ggplot2::ylab("score")+
ggplot2::theme_classic()+
ggplot2::theme(text = ggplot2::element_text(size = 2))
print(plot)
library(ggplot2)
print(create_fill_mask_plot(plot_data = plot_data,10))
library(rlan)
library(rlang)
print(create_fill_mask_plot(plot_data = plot_data,10))
devtools::load_all()
print(create_fill_mask_plot(plot_data = plot_data,10))
devtools::load_all()
print(create_fill_mask_plot(plot_data = plot_data,10))
save(plot_data)
save(plot_data,file = "plot_data")
