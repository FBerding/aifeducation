freq_cat=table(sample_target)
categories=names(freq_cat)
min_freq=min(freq_cat)
if(min_freq/k_folds<1){
fin_k_folds=floor(min_freq/1)
warning(paste("Frequency of the smallest category/label is not sufficent to ensure
at least 1 cases per fold. Adjusting number of folds from ",k_folds,"to",fin_k_folds,"."))
if(fin_k_folds==0){
stop("Frequency of the smallest category/label is to low. Please check your data.
Consider to remove all categories/labels with a very low absolute frequency.")
}
} else {
fin_k_folds=k_folds
}
val_sample=NULL
for(cat in categories){
all_names=names(subset(target,target==cat))
used_names=NULL
for(i in 1:fin_k_folds){
if(i==1){
possible_names=all_names
} else {
possible_names=setdiff(x=all_names,
y=used_names)
}
tmp_size=ceiling(length(possible_names)/(fin_k_folds-(i-1)))
selected_names<-sample(x=possible_names,
size=tmp_size,
replace=FALSE)
val_sample[i]=list(append(x=unlist(val_sample[i]),
values = selected_names))
used_names=append(used_names,values = selected_names)
}
}
train_sample=NULL
for(i in 1:fin_k_folds){
train_sample[i]=list(setdiff(x=names(sample_target),y=val_sample[[i]]))
}
unlabeled_cases=setdiff(x=names(target),y=c(val_sample[[1]],train_sample[[1]]))
results<-list(val_sample=val_sample,
train_sample=train_sample,
n_folds=fin_k_folds,
unlabeled_cases=unlabeled_cases)
table(target[results$val_sample[[1]]])
table(debug_targets)
13/5
table(target[results$train_sample[[1]]])
table(target[results$val_sample[[1]]])
table(target[results$val_sample[[2]]])
table(target[results$val_sample[[3]]])
table(target[results$val_sample[[4]]])
table(target[results$val_sample[[5]]])
table(target[results$val_sample[[6]]])
devtools::build()
devtools::build()
devtools::load_all()
devtools::load_all()
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/Training_Data.RData")
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/Embeddings/gbert_base/embeddings_gbert_base.RData")
debug_targets<-training_data$mot_way
names(debug_targets)=training_data$doc_id
debug_targets<-as.factor(debug_targets)
table(debug_targets)
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(#data_embeddings=embeddings,
data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=5,
use_bpl=FALSE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
variable_name_order
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(#data_embeddings=embeddings,
data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=5,
use_bpl=FALSE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
devtools::build()
devtools::build()
devtools::load_all()
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/Training_Data.RData")
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/Embeddings/gbert_base/embeddings_gbert_base.RData")
debug_targets<-training_data$digi_lern_technology
names(debug_targets)=training_data$doc_id
debug_targets<-as.factor(debug_targets)
table(debug_targets)
test<-get_folds(target = debug_targets,k_folds = 5)
table(debug_targets[test$train_sample[[1]]])
table(debug_targets[test$train_sample[[2]]])
table(debug_targets[test$train_sample[[3]]])
table(debug_targets[test$train_sample[[4]]])
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(#data_embeddings=embeddings,
data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=FALSE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=5,
use_bpl=FALSE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
smotefamily::DBSMOTE
usethis::use_vignette("aifeducation",title = "01 Get started")
reticulate::py_available()
reticulate::py_available(initialize = FALSE)
reticulate::py_available(initialize = TRUE)
devtools::document()
devtools::build()
install.packages("~/aifeducation_0.1.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/aifeducation_0.1.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/aifeducation_0.1.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/aifeducation_0.1.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/aifeducation_0.1.0.9000.tar.gz", repos = NULL, type = "source")
abc<-tf.get_logger()
devtools::load_all()
devtools::load_all()
abc<-tf.get_logger()
abc<-tf$get_logger()
tf<<-reticulate::import("tensorflow", delay_load = TRUE)
abc<-tf$get_logger()
logger<-tf$get_logger()
devtools::load_all()
devtools::load_all()
set_config_tf_logger()
set_config_tf_logger("ERROR")
set_config_tf_logger(as.integer(2))
devtools::load_all()
set_config_tf_logger()
#-------------------------------------------------------------------------------
devtools::load_all()
devtools::load_all()
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/Training_Data.RData")
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/Embeddings/gbert_base/embeddings_gbert_base.RData")
debug_targets<-training_data$digi_lern_technology
names(debug_targets)=training_data$doc_id
debug_targets<-as.factor(debug_targets)
table(debug_targets)
debug_targets=subset(debug_targets,
names(debug_targets)%in%rownames(embeddings_edda_base$embeddings))
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
set_config_tf_logger("DEBUG")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
abc<-tf$get_logger()
abc$getEffectiveLevel
abc$getEffectiveLevel()
devtools::load_all()
set_config_tf_logger("ERROR")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
set_config_tf_logger("FATAL")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
set_config_tf_logger("INFO")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
set_config_tf_logger("WARN")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
set_config_tf_logger("ERROR")
summary(test)
test<-bundle::unbundle(test_classifier2$bundeled_model)
set_config_tf_logger("FATAL")
test<-bundle::unbundle(test_classifier2$bundeled_model)
abv<-tf$get_logger
abv<-tf$get_logger()
abv$getEffectiveLevel
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
os$environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
os<<-reticulate::import("os", delay_load = TRUE)
os$environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
os$environ$setdefault("TF_CPP_MIN_LOG_LEVEL","2")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
devtools::load_all()
set_config_tf_logger("ERROR")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
devtools::load_all()
set_config_tf_logger("ERROR")
test<-bundle::unbundle(test_classifier2$bundeled_model)
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
set_config_tf_logger("FATAL")
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=embeddings_edda_base,
#text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=NULL,
gru=c(64),
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0.0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
#-------------------------------------------------------------------------------
devtools::load_all()
set_config_tf_logger("FATAL")
test<-bundle::unbundle(test_classifier2$bundeled_model)
tf$get_logger()$setLevel('ERROR')
test<-bundle::unbundle(test_classifier2$bundeled_model)
tf$get_logger()$setLevel('FATAL')
test<-bundle::unbundle(test_classifier2$bundeled_model)
tf$get_logger()$setLevel('Error')
tf$get_logger()$setLevel('ERROR')
tf$get_logger()$warn("This is a warning.")
set_config_tf_logger("WARN")
tf$get_logger()$warn("This is a warning.")
usethis::use_vignette(name="02_classification",title="02 Classification Tasks")
usethis::use_vignette(name="classification_tasks",title="02 Classification Tasks")
datasets()
datasets
datasets()
data
data("AirPassengers")
data
data()
library(quanteda.textstats)
data()
library(quanteda.textmodels)
data()
example_data<-quanteda.textmodels::data_corpus_moviereviews
head(example_data)
example_data<-as.data.frame(example_data)
example_data<-quanteda.textmodels::data_corpus_moviereviews
class(example_data)
docvars(example_data)
quanteda::docvars(example_data)
example_data<-data.frame(
id=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$id1,
label=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$sentiment)
head(example_data)
example_data<-data.frame(
id=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$id1,
label=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$sentiment)
example_data$text<-as.data.frame(quanteda.textmodels::data_corpus_moviereviews)
head(example_data)
?bow_pp_create_vocab_draft
devtools::load_all()
4*96
15*512
devtools::build_site()
devtools::build_site()
devtools::build_site()
