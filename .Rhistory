pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
add_pos_embedding = FALSE,
hidden=c(40,20),
rec=c(40,40),
embedding_dim = 2,
self_attention_heads = 2,
repeat_encoder = 1,
attention_type = "fourier",
rec_dropout=0.1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
reticulate::py_last_error()
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.6,
loss_margin=1,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
add_pos_embedding = FALSE,
hidden=c(40,20),
rec=c(40,40),
embedding_dim = 2,
self_attention_heads = 2,
repeat_encoder = 1,
attention_type = "fourier",
rec_dropout=0.1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=2,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.5,
loss_margin=0.5,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
add_pos_embedding = FALSE,
hidden=c(40,20),
rec=c(40,40),
embedding_dim = 2,
self_attention_heads = 2,
repeat_encoder = 1,
attention_type = "fourier",
rec_dropout=0.1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=2,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=10,
Nq=10,
loss_alpha=0.5,
loss_margin=0.5,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
table(classifier$predict(newdata = current_embeddings)$expected_category,example_targets)
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
add_pos_embedding = FALSE,
hidden=c(40,20),
rec=c(40,40),
embedding_dim = 2,
self_attention_heads = 2,
repeat_encoder = 0,
attention_type = "fourier",
rec_dropout=0.1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=2,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
Ns=5,
Nq=20,
loss_alpha=0.5,
loss_margin=0.5,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
add_pos_embedding = FALSE,
hidden=c(40,20),
rec=c(40,40),
embedding_dim = 2,
self_attention_heads = 2,
repeat_encoder = 0,
attention_type = "fourier",
rec_dropout=0.1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=300,
Ns=5,
Nq=20,
loss_alpha=0.5,
loss_margin=0.5,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
table(classifier$predict(newdata = current_embeddings)$expected_category,example_targets)
devtools::load_all()
classifier<-TEClassifierRegular$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
add_pos_embedding = FALSE,
hidden=c(40,20),
rec=c(40,40),
self_attention_heads = 2,
repeat_encoder = 0,
attention_type = "multihead",
rec_dropout=0.2,
dense_dropout=0.2,
recurrent_dropout=0.2,
encoder_dropout=0.2,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=FALSE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=150,
batch_size=32,
dir_checkpoint="Trial/classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier_regular=classifier
iotarelr::plot_iota2_alluvial(classifier_regular$reliability$iota_object_end_free)
classifier_regular$reliability$standard_measures_mean
classifier_regular$reliability$test_metric_mean
table(classifier_regular$predict(newdata = current_embeddings)$expected_category,example_targets)
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#SetUp-------------------------------------------------------------------------
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
example_data<-imdb_movie_reviews
n_classes=2
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
data_targets=example_targets
data_embeddings=current_embeddings
folds=c(2,5)
methods=c("dbsmote","smote")
fold=2
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
method="dbsmote"
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
abc=test_datamanager
abc$get_dataset()
abc_test=abc$get_labeled_data()
class(abc_test)
abc_test
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
abc=test_datamanager$get_labeled_data()
class(abc)
devtools::document()
devtools::document()
devtools::document()
?DataManagerClassifier
