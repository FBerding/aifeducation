)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
reticulate::repl_python()
num_classes=1
num_classes=2
one_hot_vector=np.zeros((1,(num_classes)))
one_hot_vector
quit
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
reticulate::py_last_error()
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
reticulate::py_last_error()
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
test_datamanager$datasets$data_labeled
test_datamanager$datasets$data_labeled["one_hot_encoding"]
test_datamanager$datasets$data_labeled["matrix_form"]
devtools::test_active_file()
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#SetUp-------------------------------------------------------------------------
#Load test data
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
example_data<-imdb_movie_reviews
n_classes=2
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
data_targets=example_targets
data_embeddings=current_embeddings
#config test
folds=c(2,5)
methods=c("dbsmote","smote")
datasets$disable_progress_bars()
method="dbsmote"
fold=2
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
i=1
sample=test_datamanager$get_samples()[[i]]
#-----------------------------------------------------------------------------
test_that(paste("DataManager - Valid Splits","Fold:",i),{
#Test if no case is missing
expect_equal(length(sample$train)+length(sample$val)+length(sample$test),length(na.omit(example_targets)))
#Test if the splits are disjunctive
expect_equal(length(intersect(sample$train,sample$val)),0)
expect_equal(length(intersect(sample$train,sample$test)),0)
expect_equal(length(intersect(sample$val,sample$test)),0)
gc()
#Test if every class is part of a split
expect_true(length(table(test_datamanager$datasets$data_labeled[sample$train]["labels"]))==n_classes)
expect_true(length(table(test_datamanager$datasets$data_labeled[sample$val]["labels"]))==n_classes)
if(i<=test_datamanager$get_n_folds()){
expect_true(length(table(test_datamanager$datasets$data_labeled[sample$test]["labels"]))==n_classes)
}
gc()
#Test if the splits have the minimal absolute frequency
expect_true(min(table(test_datamanager$datasets$data_labeled[sample$train]["labels"]))>2)
expect_true(min(table(test_datamanager$datasets$data_labeled[sample$val]["labels"]))>1)
if(i<=test_datamanager$get_n_folds()){
expect_true(min(table(test_datamanager$datasets$data_labeled[sample$test]["labels"]))>1)
}
gc()
#Test if the ratio of the labels is correct (stratified sample)
expect_identical(ignore_attr = TRUE,
table(test_datamanager$datasets$data_labeled[sample$train]["labels"])/
sum(table(test_datamanager$datasets$data_labeled[sample$train]["labels"])),
table(example_targets)/sum(table(example_targets))
)
gc()
expect_identical(ignore_attr = TRUE,
table(test_datamanager$datasets$data_labeled[sample$val]["labels"])/
sum(table(test_datamanager$datasets$data_labeled[sample$val]["labels"])),
table(example_targets)/sum(table(example_targets))
)
gc()
if(i<=test_datamanager$get_n_folds()){
expect_identical(ignore_attr = TRUE,
table(test_datamanager$datasets$data_labeled[sample$test]["labels"])/
sum(table(test_datamanager$datasets$data_labeled[sample$test]["labels"])),
table(example_targets)/sum(table(example_targets))
)
}
gc()
})
test_datamanager$set_state(iteration = i,step=NULL)
test_datamanager$create_synthetic(trace = FALSE,inc_pseudo_data = FALSE)
if(!is.null(test_datamanager$datasets$data_labeled_synthetic)){
synthetic_cases_per_seq=table(test_datamanager$datasets$data_labeled_synthetic["length"],
test_datamanager$datasets$data_labeled_synthetic["labels"])
original_cases_per_seq=table(test_datamanager$get_dataset()["length"],
test_datamanager$get_dataset()["labels"])
for(r in intersect(rownames(original_cases_per_seq),rownames(synthetic_cases_per_seq))){
for (c in intersect(colnames(original_cases_per_seq),colnames(synthetic_cases_per_seq))) {
if(original_cases_per_seq[r,c]>3){
expect_equal(object=original_cases_per_seq[r,c]+synthetic_cases_per_seq[r,c],
expected = max(original_cases_per_seq[r,]),
tolerance = 1)
}
}
}
}
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
sample=test_datamanager$get_samples()[[i]]
#-----------------------------------------------------------------------------
test_that(paste("DataManager - Valid Splits","Fold:",i),{
#Test if no case is missing
expect_equal(length(sample$train)+length(sample$val)+length(sample$test),length(na.omit(example_targets)))
#Test if the splits are disjunctive
expect_equal(length(intersect(sample$train,sample$val)),0)
expect_equal(length(intersect(sample$train,sample$test)),0)
expect_equal(length(intersect(sample$val,sample$test)),0)
gc()
#Test if every class is part of a split
expect_true(length(table(test_datamanager$datasets$data_labeled[sample$train]["labels"]))==n_classes)
expect_true(length(table(test_datamanager$datasets$data_labeled[sample$val]["labels"]))==n_classes)
if(i<=test_datamanager$get_n_folds()){
expect_true(length(table(test_datamanager$datasets$data_labeled[sample$test]["labels"]))==n_classes)
}
gc()
#Test if the splits have the minimal absolute frequency
expect_true(min(table(test_datamanager$datasets$data_labeled[sample$train]["labels"]))>2)
expect_true(min(table(test_datamanager$datasets$data_labeled[sample$val]["labels"]))>1)
if(i<=test_datamanager$get_n_folds()){
expect_true(min(table(test_datamanager$datasets$data_labeled[sample$test]["labels"]))>1)
}
gc()
#Test if the ratio of the labels is correct (stratified sample)
expect_identical(ignore_attr = TRUE,
table(test_datamanager$datasets$data_labeled[sample$train]["labels"])/
sum(table(test_datamanager$datasets$data_labeled[sample$train]["labels"])),
table(example_targets)/sum(table(example_targets))
)
gc()
expect_identical(ignore_attr = TRUE,
table(test_datamanager$datasets$data_labeled[sample$val]["labels"])/
sum(table(test_datamanager$datasets$data_labeled[sample$val]["labels"])),
table(example_targets)/sum(table(example_targets))
)
gc()
if(i<=test_datamanager$get_n_folds()){
expect_identical(ignore_attr = TRUE,
table(test_datamanager$datasets$data_labeled[sample$test]["labels"])/
sum(table(test_datamanager$datasets$data_labeled[sample$test]["labels"])),
table(example_targets)/sum(table(example_targets))
)
}
gc()
})
test_datamanager$set_state(iteration = i,step=NULL)
test_datamanager$create_synthetic(trace = FALSE,inc_pseudo_data = FALSE)
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
sample=test_datamanager$get_samples()[[i]]
test_datamanager$set_state(iteration = i,step=NULL)
test_datamanager$create_synthetic(trace = FALSE,inc_pseudo_data = FALSE)
test_datamanager
test_datamanager$datasets$data_labeled
abc=test_datamanager$datasets$data_labeled["matrix_form"][1:5,]
dim(test_datamanager$datasets$data_labeled["matrix_form"])
test_datamanager$datasets$data_labeled["matrix_form"]
test_datamanager$datasets$data_labeled["matrix_form"][[1]]
dim(test_datamanager$datasets$data_labeled["matrix_form"][[1]])
dim(test_datamanager$datasets$data_labeled["matrix_form"][[1:2]])
dim(test_datamanager$datasets$data_labeled["matrix_form"]
)
test_datamanager$datasets$data_labeled["matrix_form"]
abc=test_datamanager$datasets$data_labeled
abc$set_format("np")
dim(abc["matrix_form"])
devtools::load_all()
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
sample=test_datamanager$get_samples()[[i]]
test_datamanager$set_state(iteration = i,step=NULL)
test_datamanager$create_synthetic(trace = FALSE,inc_pseudo_data = FALSE)
gc()
devtools::test_active_file()
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#SetUp-------------------------------------------------------------------------
#Load test data
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
example_data<-imdb_movie_reviews
n_classes=2
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
data_targets=example_targets
data_embeddings=current_embeddings
#config test
folds=c(2,5)
methods=c("dbsmote","smote")
datasets$disable_progress_bars()
method="dbsmote"
fold=2
test_datamanager<-DataManagerClassifier$new(
data_embeddings=data_embeddings,
data_targets=data_targets,
folds=fold,
val_size=0.25,
class_levels=levels(data_targets),
one_hot_encoding=TRUE,
add_matrix_map=TRUE,
sc_methods=method,
sc_min_k=1,
sc_max_k=10,
trace=FALSE
)
test_datamanager$add_replace_pseudo_data(
inputs=data_embeddings$embeddings[1:10,,,drop=FALSE],
labels=example_targets[1:10])
data_embeddings$embeddings[1:10,,,drop=FALSE]
example_targets[1:10]
test_datamanager$add_replace_pseudo_data(
inputs=data_embeddings$embeddings[1:10,,,drop=FALSE],
labels=example_targets[1:10])
inputs=data_embeddings$embeddings[1:10,,,drop=FALSE]
labels=example_targets[1:10]
prepare_r_array_for_dataset(inputs)
as.numeric(labels)
datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(inputs),
input=prepare_r_array_for_dataset(inputs),
labels=as.numeric(labels),
length=get_n_chunks(text_embeddings=inputs,features=self$config$features,times=self$config$times)),
convert = FALSE))
datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(inputs),
input=prepare_r_array_for_dataset(inputs),
labels=as.numeric(labels),
length=get_n_chunks(text_embeddings=inputs,features=768,times=4)),
convert = FALSE))
test_datamanager$add_replace_pseudo_data(
inputs=data_embeddings$embeddings[1:10,,,drop=FALSE],
labels=example_targets[1:10])
data_embeddings$embeddings[1:10,,,drop=FALSE]
inputs=data_embeddings$embeddings[1:10,,,drop=FALSE]
test_datamanager$add_replace_pseudo_data(
inputs=data_embeddings$embeddings[1:10,,,drop=FALSE],
labels=example_targets[1:10])
st_datamanager$add_replace_pseudo_data()
test_datamanager$add_replace_pseudo_data()
devtools::test_active_file()
as.numeric(data_targets)
as.numeric(example_targets[1:10])
message  = "Necessary python modules not available")
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#SetUp-------------------------------------------------------------------------
#Load test data
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
example_data<-imdb_movie_reviews
n_classes=2
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
data_targets=example_targets
data_embeddings=current_embeddings
#config test
folds=c(2,5)
methods=c("dbsmote","smote")
datasets$disable_progress_bars()
as.numeric(example_targets[1:10])
example_targets[1:10]
example_targets[1:10]-1
devtools::load_all()
devtools::test_active_file()
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#SetUp-------------------------------------------------------------------------
#Load test data
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
example_data<-imdb_movie_reviews
n_classes=2
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
data_targets=example_targets
data_embeddings=current_embeddings
#config test
folds=c(2,5)
methods=c("dbsmote","smote")
datasets$disable_progress_bars()
devtools::load_all()
devtools::test_active_file()
