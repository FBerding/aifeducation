test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(900),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer=keras::optimizer_adam(),
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=2,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
devtools::build()
reticulate::conda_create(envname = "r-reticulate")
reticulate::py_install(packages = c("keras","tensorflow"),
pip=TRUE)
reticulate::py_install(packages = c("transformers","datasets"),
pip=TRUE)
reticulate::py_install(packages = c("keras-nlp"),
pip=TRUE)
library(reticulate)
py_module_available("keras-nlp")
py_module_available("keras")
devtools::load_all()
fine_tune_bert_model(output_dir = "Trial/own_model_2",
bert_model_dir_path="Trial/Bert_Modelle",
raw_texts=training_data$text,
vocab_draft,
aug_vocab_by=0,
p_mask=0.15,
whole_word=TRUE,
test_size=0.25,
n_epoch=1,
batch_size=1,
chunk_size=400,
n_workers=1,
multi_process=FALSE,
trace=TRUE)
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/Training_Data.RData")
fine_tune_bert_model(output_dir = "Trial/own_model_2",
bert_model_dir_path="Trial/Bert_Modelle",
raw_texts=training_data$text,
vocab_draft,
aug_vocab_by=0,
p_mask=0.15,
whole_word=TRUE,
test_size=0.25,
n_epoch=1,
batch_size=1,
chunk_size=400,
n_workers=1,
multi_process=FALSE,
trace=TRUE)
create_bert_model(
model_dir="Trial/own_model_2",
vocab_raw_texts=training_data$text,
vocab_size=30522,
vocab_do_lower_case=FALSE,
max_position_embeddings=512,
hidden_size=256,
num_hidden_layer=12,
num_attention_heads=4,
intermediate_size=1500,
hidden_act="gelu",
hidden_dropput_prob=0.1,
trace=TRUE)
fine_tune_bert_model(output_dir = "Trial/own_model_2",
bert_model_dir_path="Trial/Bert_Modelle",
raw_texts=training_data$text,
vocab_draft,
aug_vocab_by=0,
p_mask=0.15,
whole_word=TRUE,
test_size=0.25,
n_epoch=1,
batch_size=1,
chunk_size=400,
n_workers=1,
multi_process=FALSE,
trace=TRUE)
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/text_model_corpus.RData")
create_bert_model(
model_dir="Trial/own_model_2",
vocab_raw_texts=texte_corpus$text,
vocab_size=30522,
vocab_do_lower_case=FALSE,
max_position_embeddings=512,
hidden_size=256,
num_hidden_layer=12,
num_attention_heads=8,
intermediate_size=1500,
hidden_act="gelu",
hidden_dropput_prob=0.1,
trace=TRUE)
devtools::build()
devtools::build()
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/Text_Embedding_Models/edda_gvc_96_10.RData")
devtools::load_all()
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/Training_Data.RData")
german_glove_cluster_32
german_glove_cluster_32$get_model_info()
embeddings<-german_glove_cluster_32$embed(raw_text = training_data$text,
doc_id = training_data$doc_id)
embeddings$embeddings[1:2,]
save(embeddings,file="C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/Embeddings/embeddings_edda_gvc_96_10.RData")
edda_gvc_96_10<-german_glove_cluster_32$clone(deep=TRUE)
save(edda_gvc_96_10,"edda_gvc_96_10.RData")
save(edda_gvc_96_10,file="edda_gvc_96_10.RData")
debug_targets<-training_data$info_flow
names(debug_targets)=training_data$doc_id
debug_targets<-as.factor(debug_targets)
table(debug_targets)
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer=keras::optimizer_adam(),
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(#data_embeddings=embeddings,
data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer=keras::optimizer_adam(),
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer=keras::optimizer_adam(),
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer=keras::optimizer_adam(),
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer=keras::optimizer_adam(),
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
devtools::build()
tf<-reticulate::import("tensorflow")
#-------------------------------------------------------------------------------
devtools::load_all()
test_classifier2<-te_classifier_neuralnet$new(
name="Test",
label="abc",
#text_embeddings=embeddings_edda_base,
text_embeddings=embeddings,
targets=as.factor(debug_targets),
config=list(
hidden=c(960,960),
gru=NULL,
dropout=0.2,
l2_regularizer=0.001,
recurrent_dropout=0,
optimizer="adam",
act_fct="sigmoid",
act_fct_last="softmax",
err_fct="CategoricalCrossentropy")
)
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(data_embeddings=embeddings,
#data_embeddings=embeddings_edda_base,
data_targets=as.factor(debug_targets),
data_n_valid_samples=5,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("adas"),
bsc_max_k=5,
use_bpl=TRUE,
bpl_max_steps=6,
bpl_inc_ratio=0.5,
bpl_anchor=0.66,
bpl_valid_size=0.33,
epochs=30,
batch_size=32,
rel_tolerance=1e-4,
trace=TRUE,
keras_trace=1,
view_metrics=FALSE,
n_cores=4,
dir_checkpoint="Trial/checkpoints",
opt_model_reset=TRUE)
devtools::build()
categories<-c(
"basic_structure"="Strukturierung",
"basic_activation"="Aktivierung",
"basic_web"="Vernetzung",
"mot_prob"="Problemoffenheit",
"mot_way"="Lösungswegoffenheit",
"mot_res"="Ergebnisoffenheit",
"comp"="Kompetenzerleben",
"social"="Soziale Eingebundenheit",
"operate"="Operieren",
"action"="Handeln",
"action_kind"="Art der Handlung/Operationen",
"action_context"="Art des Kontextes",
"action_inform"="Informieren",
"action_plan"="Planen",
"action_decision"="Entscheiden",
"action_act"="Durchführen",
"action_check"="Kontrollieren",
"action_evaluate"="Evaluieren",
"process_orientation"="Prozessorientierung",
"value_flow"="Wertströme",
"cash_flow"="Zahlungsströme",
"info_flow"="Informationsströme",
"sustain_sdg1"="SDG01: Keine Armut",
"sustain_sdg2"="SDG02: Kein Hunger",
"sustain_sdg3"="SDG03: Gesundheit und Wohlergehen",
"sustain_sdg4"="SDG04: Hochwertige Bildung",
"sustain_sdg5"="SDG05: Geschlechter Gleichheit",
#"sustain_sdg6"="SDG06: Sauberes Wasser und Sanitäreinrichtungen",
"sustain_sdg7"="SDG07: Bezahlbare und saubere Energie",
"sustain_sdg8"="SDG08: Menschenwürde Arbeit und Wirtschaftswachstum",
"sustain_sdg9"="SDG09: Industrie, Innovation und Infrakstruktur",
"sustain_sdg10"="SDG10: Weniger Ungleichheit",
#"sustain_sdg11"="SDG11: Nachhaltige Städte und Gemeinden",
"sustain_sdg12"="SDG12: Nachhaltiger Konsum und nachhaltige Produktion",
"sustain_sdg13"="SDG13: Massnahmen zum Klimaschutz",
"sustain_sdg14"="SDG14: Leben unter Wasser",
"sustain_sdg15"="SDG15: Leben an Land",
"sustain_sdg16"="SDG16: Frieden Gerechtigkeit und starke Instituionen",
"sustain_sdg17"="SDG17: Partnerschaften zur Erreichung der Ziele",
"sustain_fc_FW"="Fachwissen",
"sustain_fc_SW"="Systemwissen",
"sustain_fc_MK"="Methodeneinsatz",
"sustain_sc"="Sozialkompetenz",
"sustain_pc_dec"="Entscheidungsfähigkeit",
"sustain_pc_att"="Kritische Haltung",
"sustain_pc_ref"="Relfelxivität",
"digi_lern_technology"="Integration digitaler Lerntechnologie",
"digi_lern_collaboration"="Technologie zur Zusammenarbeit",
"digi_lern_topic"="Technologie zur aktiven Auseinandersetzung mit dem Inhalt",
"digi_lern_feedback"="Technologiegestütztes Feedback",
"digi_general_it"="Allgemeine Technologie der Berufswelt",
"digi_specific_it"="Spezielle berufsspezifische Technologien",
"digi_verbalisation"="Kommunizieren über Ergebnisse von Technologie",
"digi_learning"="Eigenständiges Lernen mit Technologie",
"digi_conditions"="Berücksichtigung von Rahmenbedingungen",
"digi_creating"="Beteiligung an der Entwicklung berufsspezifischer Technologie",
"problem_quality"="Art des Problems",
"problem_process"="Umgang mit Anforderungen",
NA
)
names(categories)
test<-training_data[,names(categories)[1]]
table(test)
rownames(training_data)
devtools::build()
devtools::build()
