)
})
setwd("~/aifeducation")
test_that("training_baseline_only", {
expect_no_error(
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_n_test_samples=2,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=FALSE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
use_bpl=FALSE,
bpl_max_steps=2,
bpl_epochs_per_step=1,
bpl_dynamic_inc=FALSE,
bpl_balance=TRUE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0.02,
bpl_weight_start=0.00,
bpl_model_reset=FALSE,
epochs=2,
batch_size=32,
dir_checkpoint=testthat::test_path("test_data/tmp"),
trace=FALSE,
view_metrics=FALSE,
keras_trace=0,
n_cores=1)
)
})
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
tmp_path="test_data/roberta"
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
test_that("train_tune_roberta_model", {
example_data<-data.frame(
id=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$id1,
label=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$sentiment)
example_data$text<-as.character(quanteda.textmodels::data_corpus_moviereviews)
expect_no_error(
train_tune_roberta_model(output_dir=testthat::test_path("test_data/roberta"),
model_dir_path=testthat::test_path("test_data/roberta"),
raw_texts= example_data$text[1:5],
p_mask=0.30,
val_size=0.1,
n_epoch=1,
batch_size=1,
chunk_size=100,
n_workers=1,
multi_process=FALSE,
trace=FALSE))
})
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
test_that("creation_roberta", {
expect_s3_class(bert_modeling,
class="TextEmbeddingModel")
})
test_that("embedding_roberta", {
embeddings<-bert_modeling$embed(raw_text = example_data$text[1:10],
doc_id = example_data$id[1:10])
expect_s3_class(embeddings, class="EmbeddedText")
})
test_that("encoding_roberta", {
encodings<-bert_modeling$encode(raw_text = example_data$text[1:10],
token_encodings_only = TRUE)
expect_length(encodings,10)
expect_type(encodings,type="list")
})
example_data$text[1:10]
encodings<-bert_modeling$encode(raw_text = example_data$text[1:10],
token_encodings_only = TRUE)
expect_length(encodings,10)
encodings
devtools::load_all()
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
test_that("encoding_roberta", {
encodings<-bert_modeling$encode(raw_text = example_data$text[1:10],
token_encodings_only = TRUE)
expect_length(encodings,10)
expect_type(encodings,type="list")
})
devtools::load_all()
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
test_that("creation_roberta", {
expect_s3_class(bert_modeling,
class="TextEmbeddingModel")
})
test_that("embedding_roberta", {
embeddings<-bert_modeling$embed(raw_text = example_data$text[1:10],
doc_id = example_data$id[1:10])
expect_s3_class(embeddings, class="EmbeddedText")
})
devtools::load_all()
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
test_that("creation_roberta", {
expect_s3_class(bert_modeling,
class="TextEmbeddingModel")
})
test_that("embedding_roberta", {
embeddings<-bert_modeling$embed(raw_text = example_data$text[1:10],
doc_id = example_data$id[1:10])
expect_s3_class(embeddings, class="EmbeddedText")
})
encodings<-bert_modeling$encode(raw_text = example_data$text[1:10],
token_encodings_only = TRUE)
encodings
decodings<-bert_modeling$decode(encodings)
decodings
encodings<-bert_modeling$encode(raw_text = example_data$text[1:10],
token_encodings_only = TRUE)
decodings<-bert_modeling$decode(encodings)
decodings
devtools::load_all()
#-------------------------------------------------------------------------------
bert_modeling<-TextEmbeddingModel$new(
model_name="roberta_embedding",
model_label="Text Embedding via RoBERTa",
model_version="0.0.1",
model_language="english",
method = "roberta",
max_length = 256,
chunks=4,
overlap=40,
aggregation="last",
model_dir=testthat::test_path(tmp_path))
encodings<-bert_modeling$encode(raw_text = example_data$text[1:10],
token_encodings_only = TRUE)
decodings<-bert_modeling$decode(encodings)
decodings
devtools::test()
gc()
gc()
devtools::build_site()
devtools::document()
devtools::build_site()
usethis::use_github_action_check_standard()
devtools::build_readme()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
devtools::check()
devtools::test()
devtools::document()
devtools::check()
reticulate::py_config()
devtools::test()
sample_values=c(
"a","A",
"b","B",
"c","C",
"d","D",
"e","E",
"f","F",
"g","G",
"h","H",
"i","I",
"j","J",
"k","K",
"l","L",
"m","M",
"n","N",
"o","O",
"p","P",
"q","Q",
"r","R",
"s","S",
"t","T",
"u","U",
"v","V",
"w","W",
"x","X",
"y","Y",
"z","Z",
seq(from=0,to=9,by=1)
)
sample_values
length=10
id_suffix=NULL
sample_values=c(
"a","A",
"b","B",
"c","C",
"d","D",
"e","E",
"f","F",
"g","G",
"h","H",
"i","I",
"j","J",
"k","K",
"l","L",
"m","M",
"n","N",
"o","O",
"p","P",
"q","Q",
"r","R",
"s","S",
"t","T",
"u","U",
"v","V",
"w","W",
"x","X",
"y","Y",
"z","Z",
seq(from=0,to=9,by=1)
)
id_suffix=sample(
x=sample_values,
size = length,
replace = TRUE)
id_suffix
id_suffix=paste(id_suffix,collapse = "")
id_suffix
devtools::document()
devtools::document()
devtools::document()
devtools::document()
reticulate::py_install("eco2ai")
reticulate::py_install("eco2ai",pip=TRUE)
eco2ai<-reticulate::import("eco2ai")
#set_config_tf_logger("WARN")
#tf$autograph$set_verbosity(0)
test_tracker<-eco2ai$Tracker(project_name = "Test_projekt",
alpha_2_code = "DE")
test_tracker$experiment_description
devtools::load_all()
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/sources/Training_Data.RData")
load("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Trainingscenter/Output/Embeddings/gbert_base/embeddings_gbert_base.RData")
debug_targets<-training_data$sustain_pc_ref
names(debug_targets)=training_data$doc_id
debug_targets<-as.factor(debug_targets)
table(debug_targets)
debug_targets=subset(debug_targets,
names(debug_targets)%in%rownames(embeddings_edda_base$embeddings))
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
#text_embeddings=bert_embeddings,
text_embeddings=embeddings_edda_base,
#targets=example_targets,
targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads = 0,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_tracker$start()
test_classifier2$train(data_embeddings=embeddings_edda_base,
#data_embeddings=bert_embeddings,
#data_targets=example_targets,
data_n_test_samples = 5,
data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
test_tracker$stop()
test_tracker
test_tracker$consumption()
test_tracker$emission_level()
#set_config_tf_logger("WARN")
#tf$autograph$set_verbosity(0)
test_tracker<-eco2ai$Tracker(project_name = "Test_projekt",
alpha_2_code = "DE",
file_name = "Trial/sustain.csv")
test_tracker$start()
test_classifier2$train(data_embeddings=embeddings_edda_base,
#data_embeddings=bert_embeddings,
#data_targets=example_targets,
data_n_test_samples = 5,
data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
test_tracker$stop()
eco2ai$summary("Trial/sustain.csv")
test_tracker$consumption
test_tracker$consumption()
test_tracker$emission_level()
carbon_code<-reticulate::import("carboncode", delay_load = TRUE)
carbon_code<-reticulate::import("carbon code", delay_load = TRUE)
carbon_code<-reticulate::import("codecarbon", delay_load = TRUE)
test_tracker_2<-carbon_code$OfflineEmissionsTracker()
test_tracker_2<-carbon_code$OfflineEmissionsTracker(
country_iso_code="DEU"
)
test_tracker_2<-carbon_code$OfflineEmissionsTracker(
country_iso_code="DEU",
tracking_mode="process",
save_to_file=FALSE,
)
test_tracker_2<-carbon_code$OfflineEmissionsTracker(
country_iso_code="DEU",
tracking_mode="process",
save_to_file=FALSE
)
test_tracker_2$start()
test_classifier2$train(data_embeddings=embeddings_edda_base,
#data_embeddings=bert_embeddings,
#data_targets=example_targets,
data_n_test_samples = 5,
data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
test_tracker_2$stop()
test_tracker_2
test_tracker_2$final_emissions_data
test_tracker_2$final_emissions
test_tracker_2$final_emissions_data$energy_consumed
test_tracker_2$final_emissions_data$cpu_energy
#set_config_tf_logger("WARN")
#tf$autograph$set_verbosity(0)
test_tracker<-eco2ai$Tracker(project_name = "Test_projekt",
alpha_2_code = "DE",
file_name = "Trial/sustain.csv")
test_tracker$start()
test_tracker$stop()
test_tracker_2<-carbon_code$OfflineEmissionsTracker(
country_iso_code="DEU",
tracking_mode="process",
save_to_file=FALSE
)
#set_config_tf_logger("WARN")
#tf$autograph$set_verbosity(0)
test_tracker<-eco2ai$Tracker(project_name = "Test_projekt",
alpha_2_code = "DE",
file_name = "Trial/sustain.csv")
test_tracker_2<-carbon_code$OfflineEmissionsTracker(
country_iso_code="DEU",
tracking_mode="process",
save_to_file=FALSE
)
test_tracker_2$start()
test_classifier2$train(data_embeddings=embeddings_edda_base,
#data_embeddings=bert_embeddings,
#data_targets=example_targets,
data_n_test_samples = 5,
data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
test_tracker_2$stop()
test_tracker_2
test_tracker_2$final_emissions
test_tracker_2$final_emissions_data
test_tracker_2$final_emissions_data$energy_consumed
