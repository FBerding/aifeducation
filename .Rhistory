cases_per_fold[1+(i-1)%%fin_k_folds]=cases_per_fold[1+(i-1)%%fin_k_folds]-1
}
possible_assignments=NULL
for(i in 1:length(cases_per_fold))
possible_assignments=append(
x=possible_assignments,
values=rep.int(x=i,
times = cases_per_fold[i])
)
assignments<-sample(
x=possible_assignments,
size=length(possible_assignments),
replace = FALSE
)
names(assignments)=names(focused_targets)
final_assignments=append(x=final_assignments,
values=assignments)
}
final_assignments=NULL
categories
categories="neg"
condition=(sample_target==cat)
focused_targets=subset(x = sample_target,
subset = condition)
n_cases=length(focused_targets)
cases_per_fold=vector(length = fin_k_folds)
cases_per_fold[]=ceiling(n_cases/fin_k_folds)
delta=sum(cases_per_fold)-n_cases
delta
final_assignments=NULL
for(cat in categories){
condition=(sample_target==cat)
focused_targets=subset(x = sample_target,
subset = condition)
n_cases=length(focused_targets)
cases_per_fold=vector(length = fin_k_folds)
cases_per_fold[]=ceiling(n_cases/fin_k_folds)
delta=sum(cases_per_fold)-n_cases
if(detla>0){
for(i in 1:delta){
cases_per_fold[1+(i-1)%%fin_k_folds]=cases_per_fold[1+(i-1)%%fin_k_folds]-1
}
}
possible_assignments=NULL
for(i in 1:length(cases_per_fold))
possible_assignments=append(
x=possible_assignments,
values=rep.int(x=i,
times = cases_per_fold[i])
)
assignments<-sample(
x=possible_assignments,
size=length(possible_assignments),
replace = FALSE
)
names(assignments)=names(focused_targets)
final_assignments=append(x=final_assignments,
values=assignments)
}
final_assignments=NULL
for(cat in categories){
condition=(sample_target==cat)
focused_targets=subset(x = sample_target,
subset = condition)
n_cases=length(focused_targets)
cases_per_fold=vector(length = fin_k_folds)
cases_per_fold[]=ceiling(n_cases/fin_k_folds)
delta=sum(cases_per_fold)-n_cases
if(delta>0){
for(i in 1:delta){
cases_per_fold[1+(i-1)%%fin_k_folds]=cases_per_fold[1+(i-1)%%fin_k_folds]-1
}
}
possible_assignments=NULL
for(i in 1:length(cases_per_fold))
possible_assignments=append(
x=possible_assignments,
values=rep.int(x=i,
times = cases_per_fold[i])
)
assignments<-sample(
x=possible_assignments,
size=length(possible_assignments),
replace = FALSE
)
names(assignments)=names(focused_targets)
final_assignments=append(x=final_assignments,
values=assignments)
}
val_sample=NULL
for(i in 1:fin_k_folds){
condition=(final_assignments==i)
val_sample[i]=list(names(subset(x=final_assignments,
subset=condition)))
}
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::load_all()
devtools::build()
devtools::build()
devtools::document()
devtools::build_site()
setwd("C:/Users/WissMit/Desktop/Forschung Hamburg/KI und Unterrichtsentwuerfe/Interventionsstudie")
data<-readxl::read_xlsx("results-survey854268.xlsx")
hist(data$`Bitte schätzen Sie ein, wie verständlich die Benutzeroberfläche von Edda ist.  Einschätzung 1 (keine Zustimmung) - 10 (sehr große Zustimmung)  [Ich konnte mich intuitiv durch die Website durchklicken und benötige keine weiteren Hilfestellungen.]`)
hist(data$`Bitte schätzen Sie ein, wie verständlich die Benutzeroberfläche von Edda ist.  Einschätzung 1 (keine Zustimmung) - 10 (sehr große Zustimmung)  [Ich konnte mich intuitiv durch die Website durchklicken und benötige keine weiteren Hilfestellungen.]`,
main="Ich konnte mich intuitiv durch die Website durchklicken und benötige keine weiteren Hilfestellungen.")
hist(data$`Bitte schätzen Sie ein, wie verständlich die Benutzeroberfläche von Edda ist.  Einschätzung 1 (keine Zustimmung) - 10 (sehr große Zustimmung)  [Alle Handlungsanweisungen sind verständlich formuliert und ich habe keine Probleme meine Unterrichtsentwürfe hochzuladen.]`,
main="Alle Handlungsanweisungen sind verständlich formuliert und ich habe keine Probleme meine Unterrichtsentwürfe hochzuladen.")
hist(data$`Bitte schätzen Sie ein, wie verständlich die Benutzeroberfläche von Edda ist.  Einschätzung 1 (keine Zustimmung) - 10 (sehr große Zustimmung)  [Ich weiß, welchen Vorteil mir EDDA bietet und worin mich die KI unterstützen sollte.]`,
main="Ich weiß, welchen Vorteil mir EDDA bietet und worin mich die KI unterstützen sollte.")
#-------------------------------------------------------------------------------
devtools::load_all()
load("vignettes/articles/data/bert_embeddings.rda")
example_data<-data.frame(
id=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$id2,
label=quanteda::docvars(quanteda.textmodels::data_corpus_moviereviews)$sentiment)
example_data$text<-as.character(quanteda.textmodels::data_corpus_moviereviews)
example_data$label[c(1:500,1001:1750)]=NA
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
#text_embeddings=bert_embeddings,
text_embeddings=embeddings_edda_base,
#targets=example_targets,
targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads = 0,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads = 0,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test<-bundle::unbundle(test_classifier2$bundeled_model)
summary(test)
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
devtools::load_all()
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
devtools::load_all()
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
devtools::load_all()
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
test_classifier2$model_config$n_self_attention_heads
devtools::load_all()
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
devtools::load_all()
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=c(32,32),
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
#bert_embeddings<-embeddings
test_classifier2<-TextEmbeddingClassifierNeuralNet$new(
name="Test",
label="abc",
text_embeddings=bert_embeddings,
#text_embeddings=embeddings_edda_base,
targets=example_targets,
#targets=debug_targets,
hidden=NULL,
rec=NULL,
self_attention_heads =2,
dropout=0.5,
l2_regularizer=0.01,
recurrent_dropout=0.4,
optimizer="adam",
act_fct="gelu",
rec_act_fct="tanh")
test_classifier2$train(#data_embeddings=embeddings_edda_base,
data_embeddings=bert_embeddings,
data_targets=example_targets,
data_n_test_samples = 5,
#data_targets=debug_targets,
use_baseline=TRUE,
bsl_val_size=0.25,
use_bsc=TRUE,
bsc_methods=c("dbsmote"),
bsc_max_k=10,
bsc_val_size=0.25,
bsc_add_all=FALSE,
use_bpl=FALSE,
bpl_max_steps=5,
bpl_epochs_per_step=15,
bpl_dynamic_inc=TRUE,
bpl_balance=FALSE,
bpl_max=1.00,
bpl_anchor=1.00,
bpl_min=0.00,
bpl_weight_inc=0,
bpl_weight_start=1.00,
bpl_model_reset=TRUE,
epochs=5,
batch_size=32,
trace=TRUE,
view_metrics=FALSE,
keras_trace=1,
n_cores=3,
dir_checkpoint="Trial/checkpoints")
devtools::build()
devtools::build_site()
reticulate::conda_list()
conda_python()
reticulate::conda_python()
usethis::use_cran_badge()
devtools::document()
devtools::build_site()
devtools::check_win_release()
devtools::check_win_devel()
link_mac<-devtools::check_mac_release()
