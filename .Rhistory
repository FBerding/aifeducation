emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#Save Model
expect_no_error(save_to_disk(object=text_embedding_model,
dir_path = root_path_results,
folder_name=folder_name))
folder_name=paste0(
"function_save_load_",
framework,"_",
base_model,"_",
pooling_type,"_",
max_layer,"_",
min_layer)
#Save Model
expect_no_error(save_to_disk(object=text_embedding_model,
dir_path = root_path_results,
folder_name=folder_name))
devtools::load_all()
start_studio_new()
start_studio_new()
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
folder_name=paste0(
"function_save_load_",
framework,"_",
base_model,"_",
pooling_type,"_",
max_layer,"_",
min_layer)
save_location=paste0(root_path_results,"/",folder_name)
#Save Model
expect_no_error(save_to_disk(object=text_embedding_model,
dir_path = root_path_results,
folder_name=folder_name))
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
devtools::load_all()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
devtools::load_all()
devtools::load_all()
start_studio_new()
devtools::load_all()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
start_studio_new()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
start_studio_new()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
devtools::load_all()
styler:::style_active_file()
start_studio_new()
styler:::style_active_file()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
devtools::load_all()
styler:::style_active_file()
start_studio_new()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
styler:::style_active_file()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
length(character(0))
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
start_studio_new()
devtools::load_all()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#SetUp-------------------------------------------------------------------------
#Set paths
root_path_data=testthat::test_path("test_data/TextEmbeddingModel")
if(dir.exists(testthat::test_path("test_artefacts"))==FALSE){
dir.create(testthat::test_path("test_artefacts"))
}
root_path_results=testthat::test_path("test_artefacts/TextEmbeddingModel")
if(dir.exists(root_path_results)==FALSE){
dir.create(root_path_results)
}
#SetUp tensorflow
aifeducation::set_config_gpu_low_memory()
set_config_tf_logger("ERROR")
set_config_os_environ_logger("ERROR")
#SetUp datasets
#Disable tqdm progressbar
transformers$logging$disable_progress_bar()
datasets$disable_progress_bars()
#load data for test
#Use internal sample data
example_data=imdb_movie_reviews
#Create LargeDataSet
example_data_for_large=example_data
empty_vector=vector(length = nrow(example_data))
empty_vector[]=NA
example_data_for_large$citation=empty_vector
example_data_for_large$bib_entry=empty_vector
example_data_for_large$license=empty_vector
example_data_large=LargeDataSetForText$new()
example_data_large$add_from_data.frame(example_data_for_large)
example_data_large_single=LargeDataSetForText$new()
example_data_large_single$add_from_data.frame(example_data_for_large[1,])
#config
ml_frameworks=c("tensorflow","pytorch")
base_model_list=list(
"tensorflow"=c("bert",
"roberta",
"longformer",
"funnel",
"deberta_v2"
),
"pytorch"=c("bert",
"roberta",
"longformer",
"funnel",
"deberta_v2"))
save_format_list=list(
"tensorflow"=c("auto"),
"pytorch"=c("auto","pt","safetensors")
)
pooling_type_list=list(
"funnel"=c("cls"),
"bert"=c("cls","average"),
"roberta"=c("cls","average"),
"longformer"=c("cls","average"),
"deberta_v2"=c("cls","average")
)
max_layers=1:2
framework="pytorch"
base_model="bert"
#Set path to the base model
model_path=paste0(root_path_data,"/",
framework,"/",
base_model)
pooling_type="cls"
max_layer=2
min_layer=1
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#general
log_dir=paste0(root_path_results,"/",generate_id())
if(dir.exists(log_dir)==FALSE){
dir.create(log_dir)
}
log_file=paste0(log_dir,"aifeducation_state.log")
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#general
log_dir=paste0(root_path_results,"/",generate_id())
if(dir.exists(log_dir)==FALSE){
dir.create(log_dir)
}
log_file=paste0(log_dir,"aifeducation_state.log")
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#general
log_dir=paste0(root_path_results,"/",generate_id())
if(dir.exists(log_dir)==FALSE){
dir.create(log_dir)
}
log_file=paste0(log_dir,"aifeducation_state.log")
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#general
log_dir=paste0(root_path_results,"/",generate_id())
if(dir.exists(log_dir)==FALSE){
dir.create(log_dir)
}
log_file=paste0(log_dir,"aifeducation_state.log")
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#general
log_dir=paste0(root_path_results,"/",generate_id())
if(dir.exists(log_dir)==FALSE){
dir.create(log_dir)
}
log_file=paste0(log_dir,"aifeducation_state.log")
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
devtools::load_all()
#Create Model
text_embedding_model<-TextEmbeddingModel$new(
model_name=paste0(base_model,"_embedding"),
model_label=paste0("Text Embedding via",base_model),
model_version="0.0.1",
model_language="english",
method = base_model,
ml_framework=framework,
max_length = 20,
chunks=4,
overlap=10,
emb_layer_min = min_layer,
emb_layer_max = max_layer,
emb_pool_type = pooling_type,
model_dir=model_path)
#general
log_dir=paste0(root_path_results,"/",generate_id())
if(dir.exists(log_dir)==FALSE){
dir.create(log_dir)
}
log_file=paste0(log_dir,"aifeducation_state.log")
embeddings<-text_embedding_model$embed_large(example_data_large,
log_file = log_file,
log_write_interval = 2)
state_log_exists=file.exists(log_file)
expect_true(state_log_exists)
log_state=read.csv(log_file)
expect_equal(nrow(log_state),3)
expect_equal(ncol(log_state),3)
expect_equal(colnames(log_state),c("value","total","message"))
folder_name=paste0(
"function_save_load_",
framework,"_",
base_model,"_",
pooling_type,"_",
max_layer,"_",
min_layer)
#Save Model
expect_no_error(save_to_disk(object=text_embedding_model,
dir_path = root_path_results,
folder_name=folder_name))
devtools::test_active_file()
devtools::load_all()
devtools::test_active_file()
devtools::build()
install.packages("~/aifeducation_0.3.4.tar.gz", repos = NULL, type = "source")
reticulate::py_available(T)
devtools::load_all()
library(shiny)
library(bslib)
start_studio_new()
devtools::load_all()
start_studio_new()
start_studio_new()
devtools::load_all()
start_studio_new()
start_studio_new()
data=LargeDataSetForText$new()
data$add_from_files_txt(dir_path = files,
log_file = "Trial/test.log",
trace = TRUE)
files="C:/Users/WissMit/Desktop/aifeducation_test_files/raw_texts_2"
data=LargeDataSetForText$new()
data$add_from_files_txt(dir_path = files,
log_file = "Trial/test.log",
trace = TRUE)
data=LargeDataSetForText$new()
data$add_from_files_txt(dir_path = files,
log_file = "Trial/test.log",
trace = TRUE,
batch_size = 2)
devtools::load_all()
files="C:/Users/WissMit/Desktop/aifeducation_test_files/raw_texts_2"
data=LargeDataSetForText$new()
data$add_from_files_txt(dir_path = files,
log_file = "Trial/test.log",
trace = TRUE,
batch_size = 2)
devtools::load_all()
files="C:/Users/WissMit/Desktop/aifeducation_test_files/raw_texts_2"
data=LargeDataSetForText$new()
data$add_from_files_txt(dir_path = files,
log_file = "Trial/test.log",
trace = TRUE,
batch_size = 2)
devtools::build()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::build()
install.packages("~/aifeducation_0.3.4.tar.gz", repos = NULL, type = "source")
reticulate::py_available(T)
devtools::load_all()
library(shiny)
library(bslib)
start_studio_new()
start_studio_new()
files="C:/Users/WissMit/Desktop/aifeducation_test_files/raw_texts_2"
data=LargeDataSetForText$new()
data$add_from_files_txt(dir_path = files,
log_file = "Trial/test.log",
trace = TRUE,
batch_size = 2)
save_to_disk(data)
save_to_disk(object=data,
dir_path = "C:/Users/WissMit/Desktop/",
folder_name = "1111_test")
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
devtools::load_all()
start_studio_new()
