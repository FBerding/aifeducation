n_init_cases=nrow(data_embeddings$embeddings)
data_embeddings$embeddings=unique(data_embeddings$embeddings)
n_final_cases=nrow(data_embeddings$embeddings)
viable_cases=base::intersect(x=rownames(data_embeddings$embeddings),
names(data_targets))
#Reduce and sort rows
data_embeddings$embeddings=data_embeddings$embeddings[viable_cases,,,drop=FALSE]
data_targets=data_targets[viable_cases]
if(trace==TRUE){
message(paste(date(),
"Total Cases:",n_init_cases,
"Unique Cases:",n_final_cases,
"Labeled Cases:",length(na.omit(data_targets))))
}
#Check for valid number of folds------------------------------------------
sample_target=na.omit(data_targets)
freq_cat=table(sample_target)
categories=names(freq_cat)
min_freq=min(freq_cat)
if(min_freq<4){
stop(paste("Frequency of the smallest category/class is",min_freq,". At least
4 cases are necessary. Consider to remove this category/class."))
} else {
if(min_freq/k_folds<1){
fin_k_folds=min_freq
warning(paste("Frequency of the smallest category/class is not sufficent to ensure
at least 1 cases per fold. Adjusting number of folds from ",k_folds,"to",fin_k_folds,"."))
} else {
fin_k_folds=k_folds
}
}
k_folds3
k_folds=3
#Check for valid number of folds------------------------------------------
sample_target=na.omit(data_targets)
freq_cat=table(sample_target)
categories=names(freq_cat)
min_freq=min(freq_cat)
if(min_freq<4){
stop(paste("Frequency of the smallest category/class is",min_freq,". At least
4 cases are necessary. Consider to remove this category/class."))
} else {
if(min_freq/k_folds<1){
fin_k_folds=min_freq
warning(paste("Frequency of the smallest category/class is not sufficent to ensure
at least 1 cases per fold. Adjusting number of folds from ",k_folds,"to",fin_k_folds,"."))
} else {
fin_k_folds=k_folds
}
}
#Saving Configuration-----------------------------------------------------
self$config$n_folds=fin_k_folds
self=NULL
#Saving Configuration-----------------------------------------------------
self$config$n_folds=fin_k_folds
self$config$balance_class_weights=balance_class_weights
self$config$val_size=val_size
val_size=0.25
one_hot_encoding=TRUE
add_matrix_map=TRUE
#Saving Configuration-----------------------------------------------------
self$config$n_folds=fin_k_folds
self$config$balance_class_weights=balance_class_weights
self$config$val_size=val_size
self$config$one_hot_encoding=one_hot_encoding
self$config$add_matrix_map=add_matrix_map
self$config$n_classes=length(class_levels)
self$features=dim(data_embeddings$embeddings)[3]
self$times=dim(data_embeddings$embeddings)[2]
class_levels=levels(data_targets)
self$config$class_levels=class_levels
self$config$n_classes=length(class_levels)
#Transform Data for Python-----------------------------------------------
#Labeled Data
data_labeled_targets=na.omit(data_targets)
data_labeled_input=data_embeddings$embeddings[names(data_labeled_targets),,,drop=FALSE]
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)),
convert = FALSE))
self$data_labeled
self$data_labeled["length"]
self$data_labeled$add_column("one_hot_encoding",to_categorical_c(data_labeled_targets,self$config$n_classes))
data_labeled_targets
self$config$n_classes
data_targets=data_targets[viable_cases]
data_targets
#Transfrom categories/classes to indexex
data_targets<-as.numeric(data_targets)-1
data_targets
#Transform categories/classes to indexex
data_targets<-as.numeric(data_targets)-1
if(trace==TRUE){
message(paste(date(),
"Total Cases:",n_init_cases,
"Unique Cases:",n_final_cases,
"Labeled Cases:",length(na.omit(data_targets))))
}
#Check for valid number of folds------------------------------------------
sample_target=na.omit(data_targets)
freq_cat=table(sample_target)
categories=names(freq_cat)
min_freq=min(freq_cat)
if(min_freq<4){
stop(paste("Frequency of the smallest category/class is",min_freq,". At least
4 cases are necessary. Consider to remove this category/class."))
} else {
if(min_freq/k_folds<1){
fin_k_folds=min_freq
warning(paste("Frequency of the smallest category/class is not sufficent to ensure
at least 1 cases per fold. Adjusting number of folds from ",k_folds,"to",fin_k_folds,"."))
} else {
fin_k_folds=k_folds
}
}
#Saving Configuration-----------------------------------------------------
self$config$n_folds=fin_k_folds
self$config$balance_class_weights=balance_class_weights
self$config$val_size=val_size
self$config$one_hot_encoding=one_hot_encoding
self$config$add_matrix_map=add_matrix_map
self$config$class_levels=class_levels
self$config$n_classes=length(class_levels)
self$features=dim(data_embeddings$embeddings)[3]
self$times=dim(data_embeddings$embeddings)[2]
#Transform Data for Python-----------------------------------------------
#Labeled Data
data_labeled_targets=na.omit(data_targets)
data_labeled_input=data_embeddings$embeddings[names(data_labeled_targets),,,drop=FALSE]
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)),
convert = FALSE))
data_labeled_targets
data_targets
data_targets=example_targets
#Matching Input and Target Data
data_embeddings=data_embeddings$clone(deep=TRUE)
viable_cases=base::intersect(x=rownames(data_embeddings$embeddings),
names(data_targets))
data_embeddings$embeddings=data_embeddings$embeddings[viable_cases,,,drop=FALSE]
data_targets=data_targets[viable_cases]
#Reducing to Unique Cases
if(trace==TRUE){
message(paste(date(),
"Checking Uniqueness of Data"))
}
n_init_cases=nrow(data_embeddings$embeddings)
data_embeddings$embeddings=unique(data_embeddings$embeddings)
n_final_cases=nrow(data_embeddings$embeddings)
viable_cases=base::intersect(x=rownames(data_embeddings$embeddings),
names(data_targets))
#Reduce and sort rows
data_embeddings$embeddings=data_embeddings$embeddings[viable_cases,,,drop=FALSE]
data_targets=data_targets[viable_cases]
#Transform categories/classes to indexex
data_targets<-as.numeric(data_targets)-1
data_targets
#Check for valid number of folds------------------------------------------
sample_target=na.omit(data_targets)
freq_cat=table(sample_target)
categories=names(freq_cat)
min_freq=min(freq_cat)
if(min_freq<4){
stop(paste("Frequency of the smallest category/class is",min_freq,". At least
4 cases are necessary. Consider to remove this category/class."))
} else {
if(min_freq/k_folds<1){
fin_k_folds=min_freq
warning(paste("Frequency of the smallest category/class is not sufficent to ensure
at least 1 cases per fold. Adjusting number of folds from ",k_folds,"to",fin_k_folds,"."))
} else {
fin_k_folds=k_folds
}
}
data_targets
#Transform Data for Python-----------------------------------------------
#Labeled Data
data_labeled_targets=na.omit(data_targets)
data_labeled_targets
data_labeled_input=data_embeddings$embeddings[names(data_labeled_targets),,,drop=FALSE]
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)),
convert = FALSE))
data_labeled_targets
rownames(data_labeled_input)
data_labeled_input=data_embeddings$embeddings[names(data_labeled_targets),,,drop=FALSE]
rownames(data_labeled_input)
names(data_labeled_targets)
data_targets
data_targets=example_targets
#Matching Input and Target Data
data_embeddings=data_embeddings$clone(deep=TRUE)
viable_cases=base::intersect(x=rownames(data_embeddings$embeddings),
names(data_targets))
data_embeddings$embeddings=data_embeddings$embeddings[viable_cases,,,drop=FALSE]
data_targets=data_targets[viable_cases]
n_init_cases=nrow(data_embeddings$embeddings)
data_embeddings$embeddings=unique(data_embeddings$embeddings)
n_final_cases=nrow(data_embeddings$embeddings)
viable_cases=base::intersect(x=rownames(data_embeddings$embeddings),
names(data_targets))
#Reduce and sort rows
data_embeddings$embeddings=data_embeddings$embeddings[viable_cases,,,drop=FALSE]
data_targets=data_targets[viable_cases]
data_targets_names=names(data_targets)
#Transform categories/classes to index
data_targets<-as.numeric(data_targets)-1
names(data_targets)=data_targets_names
data_targets
#Transform Data for Python-----------------------------------------------
#Labeled Data
data_labeled_targets=na.omit(data_targets)
data_labeled_input=data_embeddings$embeddings[names(data_labeled_targets),,,drop=FALSE]
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)),
convert = FALSE))
self$data_labeled$add_column("one_hot_encoding",to_categorical_c(data_labeled_targets,self$config$n_classes))
self$data_labeled
to_categorical_c(data_labeled_targets,self$config$n_classes)
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
self$data_labeled$add_column("one_hot_encoding",reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
self$data_labeled$add_column("one_hot_encoding",reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
self$data_labeled$add_column(name="one_hot_encoding",column=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
reticulate::py_last_error()
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
reticulate::dict("one_hot_encoding"=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
)
self$data_labeled$add_column(
column=reticulate::dict("one_hot_encoding"=reticulate::np_array(
to_categorical_c(data_labeled_targets,self$config$n_classes))))
self$data_labeled$add_column(name="one_hot_encoding",
column=reticulate::dict("one_hot_encoding"=reticulate::np_array(
to_categorical_c(data_labeled_targets,self$config$n_classes))))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::np_array(
to_categorical_c(data_labeled_targets,self$config$n_classes)))
self$data_labeled$add_column(
name="one_hot_encoding",
column=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input))))
np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)))
self$data_labeled$add_column(
name="one_hot_encoding",
column=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input))))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L)
self$data_labeled$add_column(
name="one_hot_encoding",
column=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),
axis=0L))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
self$data_labeled$add_column(
name="one_hot_encoding",
column=list(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),
axis=0L)))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::dict(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)))
reticulate::dict(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)))
reticulate::dict(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
reticulate::py_last_error()
self$data_labeled[0]
self$data_labeled[0:1]
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
self$data_labeled$add_column(
name="one_hot_encoding",
column=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))
np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)
self$data_labeled
self$data_labeled["input"]
self$data_labeled$set_format("inputs","pt")
self$data_labeled["inputs"]$set_format("torch")
self$data_labeled$set_format(type="torch",columns="inputs")
self$data_labeled$set_format(type="torch",columns="input")
self$data_labeled[0]
self$data_labeled
self$data_labeled[0]
self$data_labeled["id"]
self$data_labeled["id"][0]
self$data_labeled[0]["id"]
self$data_labeled[0]
self$data_labeled
self$data_labeled[0]
self$data_labeled["input"]
self$data_labeled["length"]
self$data_labeled$add_column(
name="one_hot_encoding",
column=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L)
reticulate::np_array(data_labeled_input)
np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L)
retiruclate::dict(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)))
reticulate::dict(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
reticulate::dict(one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::dict(one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)))
reticulate::dict(one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)
)
self$data_labeled$add_column(
name="one_hot_encoding",
column=list(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L)))
list(np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
self$data_labeled$add_column(
name="one_hot_encoding",
column=reticulate::dict(
one_hot_encoding=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes))))
reticulate::dict(
one_hot_encoding=reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)))
self$data_labeled$add_column(
name="one_hot_encoding",
column=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),axis=0L))
size(data_labeled_input)
object.size(data_labeled_input)
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)
one_hot_encoding=np$split(
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(
reticulate::np_array(data_labeled_input),
as.integer(nrow(data_labeled_input)),
axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)
one_hot_encoding=np$split(
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(
reticulate::np_array(data_labeled_input),
as.integer(nrow(data_labeled_input)),
axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times),
one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),
axis=0L)),
convert = FALSE))
self$data_labeled
self$data_labeled[0]
self$data_labeled$set_format("torch")
self$data_labeled[0]
self$data_labeled[0]["one_hot_encoding"]
self$data_labeled[0]["one_hot_encoding"]$one_hot_encoding
self$data_labeled[0]["one_hot_encoding"]$one_hot_encoding$size()
one_hot_encoding_data=datasets$Dataset$from_dict(
one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),
axis=0L)
)
one_hot_encoding_data=datasets$Dataset$from_dict(
reticulate::dict(
one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),
axis=0L)
)
)
one_hot_encoding_data
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)),
convert = FALSE))
self$data_labeled$add_column("one_hot_encoding",one_hot_encoding_data["one_hot_encoding_data"])
self$data_labeled$add_column("one_hot_encoding",one_hot_encoding_data["one_hot_encoding"])
self$data_labeled
self$data_labeled=datasets$Dataset$from_dict(
reticulate::dict(
list(id=rownames(data_labeled_input),
input=np$split(reticulate::np_array(data_labeled_input),as.integer(nrow(data_labeled_input)),axis=0L),
labels=data_labeled_targets,
length=get_n_chunks(text_embeddings=data_labeled_input,features=self$features,times=self$times)),
convert = FALSE))
if(self$config$one_hot_encoding==TRUE){
one_hot_encoding_data=datasets$Dataset$from_dict(
reticulate::dict(
one_hot_encoding=np$split(
reticulate::np_array(to_categorical_c(data_labeled_targets,self$config$n_classes)),
as.integer(nrow(data_labeled_input)),
axis=0L)
)
)
}
self$data_labeled=self$data_labeled$add_column("one_hot_encoding",one_hot_encoding_data["one_hot_encoding"])
self$data_labeled
matrix_form=datasets$Dataset$from_dict(
reticulate::dict(
matrix_form=np$split(
reticulate::np_array(array_to_matrix(data_labeled_input))),
as.integer(nrow(data_labeled_input)),
axis=0L)
)
reticulate::np_array(array_to_matrix(data_labeled_input)))
reticulate::np_array(array_to_matrix(data_labeled_input))
matrix_form=datasets$Dataset$from_dict(
reticulate::dict(
matrix_form=np$split(
reticulate::np_array(array_to_matrix(data_labeled_input)),
as.integer(nrow(data_labeled_input)),
axis=0L)
)
)
self$data_labeled=self$data_labeled$add_column("matrix_form",one_hot_encoding_data["matrix_form"])
self$data_labeled=self$data_labeled$add_column("matrix_form",matrix_form["matrix_form"])
self$data_labeled
self$data_labeled["matrix_form"][1]
self$data_labeled["matrix_form"][1:2]
reticulate::np_array(self$data_labeled["matrix_form"][1:2])
as.matrix(self$data_labeled["matrix_form"][1:2])
as.matrix(self$data_labeled["matrix_form"][[1:2]])
self$data_labeled["matrix_form"][[1:2]]
self$data_labeled["matrix_form"][1:2]
self$data_labeled$set_format("torch")
self$data_labeled[1:2]
gc()
self$data_labeled[1:2]["one_hot_encoding"]
self$data_labeled[1:2]
self$data_labeled[1:3]
self$data_labeled[1:3]["one_hot_encoding"]
abc<-self$data_labeled[1:3]["one_hot_encoding"]
abc$one_hot_encoding
abc$one_hot_encoding$size()
devtools::test_active_file()
devtools::test()
install.packages(c("aifeducation", "brew", "bslib", "callr", "cli", "curl", "data.table", "DBI", "digest", "DT", "future", "geomtextpath", "ggplot2", "gh", "globals", "htmltools", "httpuv", "httr2", "igraph", "later", "Matrix", "munsell", "pak", "parallelly", "pkgbuild", "processx", "psych", "qpdf", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "readtext", "remotes", "reticulate", "rmarkdown", "rstudioapi", "sass", "sf", "shape", "shiny", "shinyWidgets", "smotefamily", "systemfonts", "tidyselect", "tinytex", "tm", "usethis", "xfun"))
devtools::load_all()
install_py_modules(install = "all",remove_first = TRUE)
install.packages(c("aifeducation", "cli", "data.table", "digest", "DT", "htmltools", "httpuv", "knitr", "later", "Matrix", "promises", "proxyC", "quanteda", "Rcpp", "RcppArmadillo", "reticulate", "sass", "shinyWidgets", "xfun"))
install.packages(c("cli", "proxyC"))
reticulate::use_condaenv("aifeducation")
devtools::load_all()
devtools::test()
devtools::test_active_file()
reticulate::use_condaenv("aifeducation")
devtools::load_all()
devtools::test()
start_aifeducation_studio()
