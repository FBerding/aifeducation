parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
# Test that masking values are the same
expect_equal(y[[2]]$numpy(), values[[2]]$numpy())
expect_equal(y[[3]]$numpy(), values[[3]]$numpy())
expect_equal(y[[4]]$numpy(), values[[4]]$numpy())
# Test that padding is not destroyed
y_2 <- masking_layer(y[[1]])
expect_equal(y[[2]]$numpy(), y_2[[2]]$numpy())
# Dense Layer with Mask-----------------------------------------------------------
test_that("DenseLayer with Mask", {
normalization_types <- c("None", "layer_norm")
residual_types=c("None", "addition", "residual_gate")
pad_value <- sample(x = seq(from = -200, to = 0, by = 10), size = 1)
times <- sample(x = seq(from = 3, to = 10, by = 1), size = 1)
features <- sample(x = seq(from = 3, to = 1024, by = 1), size = 1)
sequence_length <- sample(x = seq(from = 1, to = times, by = 1), size = 30, replace = TRUE)
example_tensor <- generate_tensors(
times = times,
features = features,
seq_len = sequence_length,
pad_value = pad_value
)
masking_layer <- py$masking_layer(pad_value)
values <- masking_layer(example_tensor)
# Test for equal, more, and fewer features as input size
features_output <- c(
features,
sample(x = seq(from = 1, to = (features - 1)), size = 1),
sample(x = seq(from = (features + 1), to = 2 * features), size = 1)
)
for (norm_types in normalization_types) {
for (res_types in residual_types){
for (target_features in features_output) {
# Create layer
layer <- py$dense_layer_with_mask(
input_size = as.integer(features),
output_size = as.integer(target_features),
times = as.integer(times),
pad_value = as.integer(pad_value),
act_fct = "elu",
dropout = 0.3,
bias = TRUE,
parametrizations = "None",
dtype = values[[1]]$dtype,
residual_type = "None",
normalization_type = norm_types
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
# Test that masking values are the same
expect_equal(y[[2]]$numpy(), values[[2]]$numpy())
expect_equal(y[[3]]$numpy(), values[[3]]$numpy())
# Test the correct size of the new masking on feature level
expect_equal(dim(y[[4]]$numpy())[3], target_features)
# Test that padding is not destroyed
y_2 <- masking_layer(y[[1]])
expect_equal(y[[2]]$numpy(), y_2[[2]]$numpy())
expect_equal(y[[3]]$numpy(), y_2[[3]]$numpy())
expect_equal(y[[4]]$numpy(), y_2[[4]]$numpy())
# Test that values do not change at random for same input
y_1 <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
y_2 <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
expect_equal(y_1[[1]]$detach()$numpy(), y_2[[1]]$detach()$numpy())
}
}
}
})
times=3
features=4
sequence_length <- sample(x = seq(from = 1, to = times, by = 1), size = 30, replace = TRUE)
example_tensor <- generate_tensors(
times = times,
features = features,
seq_len = sequence_length,
pad_value = pad_value
)
masking_layer <- py$masking_layer(pad_value)
values <- masking_layer(example_tensor)
# Test for equal, more, and fewer features as input size
features_output <- c(
features,
sample(x = seq(from = 1, to = (features - 1)), size = 1),
sample(x = seq(from = (features + 1), to = 2 * features), size = 1)
)
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
# Test that masking values are the same
expect_equal(y[[2]]$numpy(), values[[2]]$numpy())
expect_equal(y[[3]]$numpy(), values[[3]]$numpy())
expect_equal(y[[4]]$numpy(), values[[4]]$numpy())
# Test that padding is not destroyed
y_2 <- masking_layer(y[[1]])
expect_equal(y[[2]]$numpy(), y_2[[2]]$numpy())
y[[1]]
values[[1]]
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
values[[2]]
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
reticulate::py_last_error()
load_all_py_scripts()
layer <- py$stack_recurrent_layers(
times = as.integer(times),
hidden_size = as.integer(features),
n_layers = 3L,
dropout = 0.3,
rec_type=rec_type,
rec_bidirectional=bidirectional,
pad_value=as.integer(pad_value),
bias = TRUE,
parametrizations = "None",
dtype=values[[1]]$dtype,
device="cpu",
residual_type="residual_gate",
return_sequence=TRUE
)
layer$eval()
y <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
# Test that masking values are the same
expect_equal(y[[2]]$numpy(), values[[2]]$numpy())
expect_equal(y[[3]]$numpy(), values[[3]]$numpy())
expect_equal(y[[4]]$numpy(), values[[4]]$numpy())
# Test that padding is not destroyed
y_2 <- masking_layer(y[[1]])
expect_equal(y[[2]]$numpy(), y_2[[2]]$numpy())
expect_equal(y[[3]]$numpy(), y_2[[3]]$numpy())
expect_equal(y[[4]]$numpy(), y_2[[4]]$numpy())
# Test that values do not change at random for same input
y_1 <- layer(
x = values[[1]],
seq_len = values[[2]],
mask_times = values[[3]],
mask_features = values[[4]]
)
devtools::test_active_file()
reticulate::py_last_error()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::load_all()
devtools::document()
