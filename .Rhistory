data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=40,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
reticulate::py_available(T)
devtools::load_all()
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
n_classes=2
example_data<-imdb_movie_reviews
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
framework="pytorch"
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=NULL,
rec=c(256),
self_attention_heads=2,
intermediate_size=512,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=100,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40),
self_attention_heads=2,
intermediate_size=512,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=100,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40),
self_attention_heads=2,
intermediate_size=40,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=100,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
reticulate::py_available(T)
devtools::load_all()
path="test_data/classifier/imdb_embeddings.rda"
load(testthat::test_path(path))
current_embeddings<-imdb_embeddings$clone(deep = TRUE)
n_classes=2
example_data<-imdb_movie_reviews
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
table(example_targets)
framework="pytorch"
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40),
self_attention_heads=2,
intermediate_size=40,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.3,
repeat_encoder=1,
dense_dropout=0.3,
recurrent_dropout=0.1,
encoder_dropout=0.3,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=70,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=120,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
table(classifier$predict(newdata = current_embeddings)$expected_category,example_targets)
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40),
self_attention_heads=2,
intermediate_size=80,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=120,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
classifier_complete=classifier
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40),
self_attention_heads=2,
intermediate_size=80,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.1,
repeat_encoder=0,
dense_dropout=0.1,
recurrent_dropout=0.1,
encoder_dropout=0.1,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=120,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
classifier_complete=classifier
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40,40),
self_attention_heads=1,
intermediate_size=NULL,
attention_type="fourier",
add_pos_embedding=TRUE,
rec_dropout=0.3,
repeat_encoder=0,
dense_dropout=0.3,
recurrent_dropout=0.1,
encoder_dropout=0.3,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=3,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=120,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
classifier_complete=classifier
table(classifier$predict(newdata = current_embeddings)$expected_category,example_targets)
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=FALSE,
pl_max_steps=5,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=60,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
classifier=classifier_complete
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
#---------------------------------------------------------------------
classifier<-TEClassifierRegular$new(
ml_framework=framework,
name="movie_review_classifier",
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=current_embeddings,
targets=example_targets,
hidden=c(40,20),
rec=c(40,40),
self_attention_heads=1,
intermediate_size=NULL,
attention_type="fourier",
add_pos_embedding=FALSE,
rec_dropout=0.3,
repeat_encoder=0,
dense_dropout=0.3,
recurrent_dropout=0.1,
encoder_dropout=0.3,
optimizer="adam")
classifier$train(
data_embeddings = current_embeddings,
data_targets = example_targets,
data_folds=5,
data_val_size=0.25,
balance_class_weights=TRUE,
balance_sequence_length=TRUE,
use_sc=TRUE,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=10,
use_pl=TRUE,
pl_max_steps=5,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=60,
batch_size=32,
dir_checkpoint="Trial/vignetten_classifier",
trace=TRUE,
keras_trace=2,
pytorch_trace=1)
vignette_classifier=classifier
usethis::use_data(vignette_classifier)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
classifier$get_sustainability_data()
classifier$reliability$test_metric_mean
classifier$reliability$standard_measures_mean
classifier$reliability$test_metric_mean
library(iotarelr)
iotarelr::plot_iota2_alluvial(test_classifier$reliability$iota_object_end_free)
library(iotarelr)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
classifier$get_sustainability_data()
library(iotarelr)
iotarelr::plot_iota2_alluvial(classifier$reliability$iota_object_end_free)
devtools::build_vignettes()
devtools::document()
devtools::build()
devtools::build()
install.packages("~/aifeducation_0.3.4.tar.gz", repos = NULL, type = "source")
install.packages("~/aifeducation_0.3.4.tar.gz", repos = NULL, type = "source")
