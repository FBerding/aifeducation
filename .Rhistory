results<-fleiss_kappa(rater_one = r_1,rater_two = r_2,additional_raters=list(r_3,r_4,r_5,r_6))
results
results
devtools::load_all()
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
results<-fleiss_kappa(rater_one = r_1,rater_two = r_2,additional_raters=list(r_3,r_4,r_5,r_6))
expect_equal(results,0.430,tolerance = 1e-3)
results
rater_one = r_1
rater_two = r_2
additional_raters=list(r_3,r_4,r_5,r_6)
check_class(rater_one, "factor", FALSE)
check_class(rater_two, "factor", FALSE)
check_class(additional_raters,"list",TRUE)
#create list of raters
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
#Check levels
for(i in 2:length(raters))
if (sum(levels(raters[[1]]) == levels(raters[[i]])) != max(length(levels(raters[[1]])), length(levels(raters[[i]])))) {
stop("Levels for values are not identical.")
}
N <- length(rater_one)
k=length(levels(rater_one))
raters=list(rater_one,rater_two)
n=length(raters)
N
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
}
raw_matrix
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
n=length(raters)
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
}
raw_matrix
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
}
#calculate probabilities
p_obs=colSums(raw_matrix)*1/(N*n)
#Agreement
p_agree=vector(length = N)
for(i in 1:N){
for(j in 1:k){
p_agree[i]=p_agree[i]+raw_matrix[i,j]*(raw_matrix[i,j]-1)
}
}
p_agree=p_agree/(n*(n-1))
#Observed Overall Agreement
p_agree_mean=mean(p_agree)
#Expected Overall Agreement
p_agree_mean_expected=sum(p_obs*p_obs)
#Final Kappa
kappa=(p_agree_mean-p_agree_mean_expected)/(1-p_agree_mean_expected)
kappa
raw_matrix
p_obs
#Agreement
p_agree=vector(length = N)
for(i in 1:N){
for(j in 1:k){
p_agree[i]=p_agree[i]+raw_matrix[i,j]*(raw_matrix[i,j]-1)
}
}
p_agree=p_agree/(n*(n-1))
p_agree
p_agree_mean
p_agree_mean_expected
p_obs
raw_matrix
#calculate probabilities
p_obs=colSums(raw_matrix)/(N*n)
p_obs
raw_matrix
colSums(raw_matrix)
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])),
n_classes = k
)
}
i=1
raters[[i]]
as.numeric(raters[[i]])
(as.numeric(raters[[i]])-1)
k
to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
}
raw_matrix
i=1
as.numeric(raters[[i]])
i=2
as.numeric(raters[[i]])
freq_table<-matrix(
data = c(0,0,0,6,0,
0,3,0,0,3,
0,1,4,0,1,
0,0,0,0,6,
0,3,0,3,0,
2,0,4,0,0,
0,0,4,0,2,
2,0,3,1,0,
2,0,0,4,0,
0,0,0,0,6,
1,0,0,5,0,
1,1,0,4,0,
0,3,3,0,0,
1,0,0,5,0,
0,2,0,3,1,
0,0,5,0,1,
3,0,0,1,2,
5,1,0,0,0,
0,2,0,4,0,
1,0,2,0,3,
0,0,0,0,6,
0,1,0,5,0,
0,2,0,1,3,
2,0,0,4,0,
1,0,0,4,1,
0,5,0,1,0,
4,0,0,0,2,
0,2,0,4,0,
1,0,5,0,0,
0,0,0,0,6),
ncol = 5,
nrow = 30,
byrow = TRUE
)
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
for (k in 1:5) {
tmp_value=freq_table[i,k]
index=0
if(tmp_value>0){
for (j in 1:tmp_value) {
raters[i,j+index]=k
}
index=tmp_value
}
}
}
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
results<-fleiss_kappa(rater_one = r_1,
rater_two = r_2,
additional_raters=list(r_3,r_4,r_5,r_6))
expect_equal(results,0.430,tolerance = 1e-3)
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in 1:tmp_value) {
raters[i,j+index]=k
}
index=tmp_value
}
}
}
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
results<-fleiss_kappa(rater_one = r_1,
rater_two = r_2,
additional_raters=list(r_3,r_4,r_5,r_6))
expect_equal(results,0.430,tolerance = 1e-3)
freq_table
raters
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in 1:tmp_value) {
raters[i,j+index]=k
}
index=tmp_value+1
}
}
}
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in (1+index):(tmp_value+index)) {
raters[i,j+index]=k
}
index=tmp_value
}
}
}
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
index=tmp_value
}
}
}
raters
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
index=tmp_value
}
}
}
raters
raters=matrix(data = 0,nrow = 30,ncol = 6)
i=3
index=0
k=1
tmp_value=freq_table[i,k]
tmp_value
k=2
tmp_value=freq_table[i,k]
tmp_value
(1+index)
(tmp_value+index)
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
index=tmp_value
tmp_value
k=3
tmp_value=freq_table[i,k]
tmp_value
1+index
(1+index):(tmp_value+index)
raters
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
raters
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
index=index+tmp_value
}
}
}
raters
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
results<-fleiss_kappa(rater_one = r_1,
rater_two = r_2,
additional_raters=list(r_3,r_4,r_5,r_6))
expect_equal(results,0.430,tolerance = 1e-3)
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
check_class(rater_one, "factor", FALSE)
check_class(rater_two, "factor", FALSE)
check_class(additional_raters,"list",TRUE)
#create list of raters
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
#Check levels
for(i in 2:length(raters))
if (sum(levels(raters[[1]]) == levels(raters[[i]])) != max(length(levels(raters[[1]])), length(levels(raters[[i]])))) {
stop("Levels for values are not identical.")
}
N <- length(rater_one)
k=length(levels(rater_one))
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
n=length(raters)
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
}
raw_matrix
raters
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
index=index+tmp_value
}
}
}
raters
r_1<-factor(raters[1,],levels = c(1,2,3,4,5))
r_2<-factor(raters[2,],levels = c(1,2,3,4,5))
r_3<-factor(raters[3,],levels = c(1,2,3,4,5))
r_4<-factor(raters[4,],levels = c(1,2,3,4,5))
r_5<-factor(raters[5,],levels = c(1,2,3,4,5))
r_6<-factor(raters[6,],levels = c(1,2,3,4,5))
results<-fleiss_kappa(rater_one = r_1,
rater_two = r_2,
additional_raters=list(r_3,r_4,r_5,r_6))
expect_equal(results,0.430,tolerance = 1e-3)
r_1
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
results<-fleiss_kappa(rater_one = r_1,
rater_two = r_2,
additional_raters=list(r_3,r_4,r_5,r_6))
results
check_class(rater_one, "factor", FALSE)
check_class(rater_two, "factor", FALSE)
check_class(additional_raters,"list",TRUE)
#create list of raters
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
#Check levels
for(i in 2:length(raters))
if (sum(levels(raters[[1]]) == levels(raters[[i]])) != max(length(levels(raters[[1]])), length(levels(raters[[i]])))) {
stop("Levels for values are not identical.")
}
N <- length(rater_one)
k=length(levels(rater_one))
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
raters
#Example taken form Fleiss (1971)
freq_table<-matrix(
data = c(0,0,0,6,0,
0,3,0,0,3,
0,1,4,0,1,
0,0,0,0,6,
0,3,0,3,0,
2,0,4,0,0,
0,0,4,0,2,
2,0,3,1,0,
2,0,0,4,0,
0,0,0,0,6,
1,0,0,5,0,
1,1,0,4,0,
0,3,3,0,0,
1,0,0,5,0,
0,2,0,3,1,
0,0,5,0,1,
3,0,0,1,2,
5,1,0,0,0,
0,2,0,4,0,
1,0,2,0,3,
0,0,0,0,6,
0,1,0,5,0,
0,2,0,1,3,
2,0,0,4,0,
1,0,0,4,1,
0,5,0,1,0,
4,0,0,0,2,
0,2,0,4,0,
1,0,5,0,0,
0,0,0,0,6),
ncol = 5,
nrow = 30,
byrow = TRUE
)
raters=matrix(data = 0,nrow = 30,ncol = 6)
for(i in 1:nrow(freq_table)){
index=0
for (k in 1:5) {
tmp_value=freq_table[i,k]
if(tmp_value>0){
for (j in (1+index):(tmp_value+index)) {
raters[i,j]=k
}
index=index+tmp_value
}
}
}
r_1<-factor(raters[,1],levels = c(1,2,3,4,5))
r_2<-factor(raters[,2],levels = c(1,2,3,4,5))
r_3<-factor(raters[,3],levels = c(1,2,3,4,5))
r_4<-factor(raters[,4],levels = c(1,2,3,4,5))
r_5<-factor(raters[,5],levels = c(1,2,3,4,5))
r_6<-factor(raters[,6],levels = c(1,2,3,4,5))
r_6
additional_raters=list(r_3,r_4,r_5,r_6)
rater_two = r_2
rater_one = r_1
additional_raters
check_class(rater_one, "factor", FALSE)
check_class(rater_two, "factor", FALSE)
check_class(additional_raters,"list",TRUE)
#create list of raters
raters=list(rater_one,rater_two)
raters=append(raters,additional_raters)
raters
#Check levels
for(i in 2:length(raters))
if (sum(levels(raters[[1]]) == levels(raters[[i]])) != max(length(levels(raters[[1]])), length(levels(raters[[i]])))) {
stop("Levels for values are not identical.")
}
N <- length(rater_one)
k=length(levels(rater_one))
N <- length(rater_one)
k=length(levels(rater_one))
n=length(raters)
#Create raw matrix
#cases in the rows and categories in the column
raw_matrix=matrix(data = 0,nrow = N,ncol = k)
for(i in 1:length(raters)){
raw_matrix=raw_matrix+to_categorical_c(
class_vector = (as.numeric(raters[[i]])-1),
n_classes = k
)
}
raw_matrix
#calculate probabilities
p_obs=colSums(raw_matrix)/(N*n)
p_obs
devtools::load_all()
results<-fleiss_kappa(rater_one = r_1,
rater_two = r_2,
additional_raters=list(r_3,r_4,r_5,r_6))
expect_equal(results,0.430,tolerance = 1e-3)
results
results<-NULL
results<-fleiss_kappa(rater_one = r_1,rater_two = r_1)
expect_equal(results,1,tolerance = 1e-3)
reticulate::py_available(T)
devtool::load_all()
devtools::load_all()
devtools::document()
devtools::test()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::build_site()
