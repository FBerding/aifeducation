attention_type =  attention,
encoder_dropout = 0.1,
repeat_encoder = r,
recurrent_dropout=0.4)
expect_s3_class(classifier,
class="TEClassifierProtoNet")
predictions=classifier$predict(
newdata = test_embeddings_reduced,
batch_size = 2,
verbose = 0)
expect_equal(object = length(predictions$expected_category),expected = nrow(test_embeddings_reduced$embeddings))
#check case order invariance
perm=sample(x=seq.int(from=1,to=nrow(test_embeddings_reduced$embeddings)))
test_embeddings_reduced_perm=test_embeddings_reduced$clone(deep = TRUE)
test_embeddings_reduced_perm$embeddings=test_embeddings_reduced_perm$embeddings[perm,,]
predictions_perm=classifier$predict(
newdata = test_embeddings_reduced_perm,
batch_size = 2,
verbose = 0)
for(i in 1:nrow(test_embeddings_reduced$embeddings)){
expect_equal(predictions[i,,],
predictions_perm[which(perm==i),,],
tolerance=1e-5)
}
expect_false(classifier$get_sustainability_data()$sustainability_tracked)
reticulate::py_available(T)
devtools::load_all()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
testthat::skip_if_not(condition=check_aif_py_modules(trace = FALSE),
message  = "Necessary python modules not available")
#Skip Tests
skip_creation_test=TRUE
skip_training_test=FALSE
#SetUp-------------------------------------------------------------------------
#Set paths
root_path_data=testthat::test_path("test_data/classifier")
if(dir.exists(testthat::test_path("test_artefacts"))==FALSE){
dir.create(testthat::test_path("test_artefacts"))
}
root_path_results=testthat::test_path("test_artefacts/TeClassifierProtoNet")
if(dir.exists(root_path_results)==FALSE){
dir.create(root_path_results)
}
#SetUp datasets
#Disable tqdm progressbar
transformers$logging$disable_progress_bar()
datasets$disable_progress_bars()
#SetUp tensorflow
aifeducation::set_config_gpu_low_memory()
set_config_tf_logger("ERROR")
set_config_os_environ_logger("ERROR")
#Load Embeddings
#object is imdb_embeddings
load(paste0(root_path_data,"/imdb_embeddings.rda"))
test_embeddings_large=imdb_embeddings$convert_to_LargeDataSetForTextEmbeddings()
test_embeddings=test_embeddings_large$convert_to_EmbeddedText()
test_embeddings_reduced=test_embeddings$clone(deep = TRUE)
test_embeddings_reduced$embeddings=test_embeddings_reduced$embeddings[1:5,,]
#case=sample(x=seq.int(from = 1,to=nrow(test_embeddings$embeddings)))
test_embeddings_single_case=test_embeddings$clone(deep = TRUE)
test_embeddings_single_case$embeddings=test_embeddings_single_case$embeddings[1,,,drop=FALSE]
#Config
ml_frameworks=c("pytorch")
rec_list=list(NULL,c(4),c(4,3))
rec_type_list=list("gru","lstm")
rec_bidirectiona_list=list(TRUE,FALSE)
hidden_list=list(NULL,c(4),c(4,3))
r_encoder_list=list(0,1,2)
attention_list=list("fourier","multihead")
pos_embedding_list=list(TRUE,FALSE)
sc_list=list(FALSE,TRUE)
pl_list=list(FALSE,TRUE)
#Create feature extractors
feature_extractor_list=NULL
for(framework in ml_frameworks){
checkpoint_path=paste0(root_path_results,"/",framework,"_fe")
extractor<-TEFeatureExtractor$new(
ml_framework = framework,
name="Test_extractor",
label="Test Extractor",
text_embeddings=test_embeddings,
features=128,
method="lstm",
noise_factor=0.01,
optimizer="adam"
)
if(dir.exists(checkpoint_path)==FALSE){
dir.create(checkpoint_path)
}
extractor$train(
data_embeddings=test_embeddings,
data_val_size=0.25,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=2,
batch_size=100,
dir_checkpoint=checkpoint_path,
trace=FALSE,
keras_trace=0,
pytorch_trace=0
)
feature_extractor_list[framework]=list(c(extractor,NULL))
}
framework="pytorch"
n_classes=2
example_data<-imdb_movie_reviews
rownames(example_data)<-rownames(test_embeddings$embeddings)
example_data$id<-rownames(test_embeddings$embeddings)
example_data<-example_data[intersect(
rownames(example_data),rownames(test_embeddings$embeddings)),]
example_data$label<-as.character(example_data$label)
example_data$label[c(201:300)]=NA
if(n_classes>2){
example_data$label[c(201:250)]<-"medium"
}
example_targets<-as.factor(example_data$label)
names(example_targets)=example_data$id
rec=rec_list[[sample(x=seq.int(from = 1,to=length(rec_list)),size = 1)]]
rec_type=rec_type_list[[sample(x=seq.int(from = 1,to=length(rec_type_list)),size = 1)]]
rec_bidirectional=rec_bidirectiona_list[[sample(x=seq.int(from = 1,to=length(rec_bidirectiona_list)),size = 1)]]
hidden=hidden_list[[sample(x=seq.int(from = 1,to=length(hidden_list)),size = 1)]]
repeat_encoder=r_encoder_list[[sample(x=seq.int(from = 1,to=length(r_encoder_list)),size = 1)]]
attention_type=attention_list[[sample(x=seq.int(from = 1,to=length(attention_list)),size = 1)]]
add_pos_embedding=pos_embedding_list[[sample(x=seq.int(from = 1,to=length(pos_embedding_list)),size = 1)]]
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=repeat_encoder,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
feature_extractor<-feature_extractor_list[[framework][[1]]
feature_extractor<-feature_extractor_list[[framework]][[1]]
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=repeat_encoder,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
use_sc=TRUE
use_pl=FALSE
use_sc=FALSE
expect_no_error(
classifier$train(
data_embeddings = test_embeddings,
data_targets = example_targets,
data_folds=2,
use_sc=use_sc,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=2,
use_pl=use_pl,
loss_alpha=0.5,
loss_margin=0.5,
pl_max_steps=2,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=2,
batch_size=32,
dir_checkpoint=train_path,
trace=FALSE,
keras_trace=0,
pytorch_trace=0)
)
#Create directory for saving checkpoint for every training
train_path=paste0(root_path_results,"/","train_",generate_id())
if(dir.exists(train_path)==FALSE){
dir.create(train_path)
}
expect_no_error(
classifier$train(
data_embeddings = test_embeddings,
data_targets = example_targets,
data_folds=2,
use_sc=use_sc,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=2,
use_pl=use_pl,
loss_alpha=0.5,
loss_margin=0.5,
pl_max_steps=2,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=2,
batch_size=32,
dir_checkpoint=train_path,
trace=FALSE,
keras_trace=0,
pytorch_trace=0)
)
expect_no_error(
classifier$train(
data_embeddings = test_embeddings,
data_targets = example_targets,
data_folds=2,
use_sc=use_sc,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=2,
use_pl=use_pl,
loss_alpha=0.5,
loss_margin=0.5,
pl_max_steps=2,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=2,
batch_size=32,
dir_checkpoint=train_path,
trace=FALSE,
keras_trace=0,
pytorch_trace=0)
)
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=repeat_encoder,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
expect_no_error(
classifier$train(
data_embeddings = test_embeddings,
data_targets = example_targets,
data_folds=2,
use_sc=use_sc,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=2,
use_pl=use_pl,
loss_alpha=0.5,
loss_margin=0.5,
pl_max_steps=2,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=2,
batch_size=32,
dir_checkpoint=train_path,
trace=FALSE,
keras_trace=0,
pytorch_trace=0)
)
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=repeat_encoder,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
expect_no_error(
classifier$train(
data_embeddings = test_embeddings,
data_targets = example_targets,
data_folds=2,
use_sc=use_sc,
sc_method="dbsmote",
sc_min_k=1,
sc_max_k=2,
use_pl=use_pl,
loss_alpha=0.5,
loss_margin=0.5,
pl_max_steps=2,
pl_max=1.00,
pl_anchor=1.00,
pl_min=0.00,
sustain_track=TRUE,
sustain_iso_code="DEU",
sustain_region=NULL,
sustain_interval=15,
epochs=2,
batch_size=32,
dir_checkpoint=train_path,
trace=FALSE,
keras_trace=0,
pytorch_trace=0)
)
expect_true(classifier$get_sustainability_data()$sustainability_tracked)
devtools::test_active_file()
devtools::test_active_file()
devtools::load_all()
devtools::test_active_file()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
#Predictions before saving and loading
embeddings=classifier$embed(
embeddings_q=test_embeddings_reduced,
batch_size=50)
embeddings_q=test_embeddings_reduced
batch_size=50
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
#Predictions before saving and loading
embeddings=classifier$embed(
embeddings_q=test_embeddings_reduced,
batch_size=50)
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
#Predictions before saving and loading
embeddings=classifier$embed(
embeddings_q=test_embeddings_reduced,
batch_size=50)
devtools::load_all()
classifier<-TEClassifierProtoNet$new(
ml_framework = framework,
name=paste0("movie_review_classifier_","classes_",n_classes),
label="Classifier for Estimating a Postive or Negative Rating of Movie Reviews",
text_embeddings=test_embeddings,
targets=example_targets,
feature_extractor = feature_extractor,
hidden=hidden,
rec=rec,
rec_type=rec_type,
rec_bidirectional=rec_bidirectional,
self_attention_heads=1,
intermediate_size=NULL,
attention_type=attention_type,
add_pos_embedding=add_pos_embedding,
rec_dropout=0.1,
repeat_encoder=1,
dense_dropout=0.4,
recurrent_dropout=0.4,
encoder_dropout=0.1,
optimizer="adam")
#Predictions before saving and loading
embeddings=classifier$embed(
embeddings_q=test_embeddings_reduced,
batch_size=50)
#check case order invariance
perm=sample(x=seq.int(from=1,to=nrow(test_embeddings_reduced$embeddings)))
test_embeddings_reduced_perm=test_embeddings_reduced$clone(deep = TRUE)
test_embeddings_reduced_perm$embeddings=test_embeddings_reduced_perm$embeddings[perm,,]
embeddings_perm=classifier$embed(
embeddings_q=test_embeddings_reduced_perm,
batch_size=50)
for(i in 1:nrow(embeddings)){
expect_equal(predictions[i,,],
predictions_perm[which(perm==i),,],
tolerance=1e-5)
}
embeddings
for(i in 1:nrow(embeddings$embeddings_q)){
expect_equal(predictions[i,,],
predictions_perm[which(perm==i),,],
tolerance=1e-5)
}
for(i in 1:nrow(embeddings$embeddings_q)){
expect_equal(embeddings[i,,],
embeddings_perm[which(perm==i),,],
tolerance=1e-5)
}
for(i in 1:nrow(embeddings$embeddings_q)){
expect_equal(embeddings[i,],
embeddings_perm[which(perm==i),],
tolerance=1e-5)
}
for(i in 1:nrow(embeddings$embeddings_q)){
expect_equal(embeddings$embeddings_q[i,],
embeddings_perm$embeddings_q[which(perm==i),],
tolerance=1e-5)
}
devtools::load_all()
devtools::test_active_file()
reticulate::py_last_error()
devtools::load_all()
devtools::test_active_file()
devtools::test_active_file()
reticulate::py_available(T)
devtools::load_all()
devtools::test_active_file()
