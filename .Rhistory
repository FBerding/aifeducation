usethis::use_rcpp()
devtools::document()
usethis::use_rcpp()
usethis::use_rcpp_armadillo()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
usethis::use_dev_package("R6")
devtools::check()
usethis::use_package(    "mlr3learners",
"mlr3pipelines",
"mlr3tuning",
"mlr3filters",
"mlr3misc",
"paradox",
"R6",
"varhandle",
"irr",
"iotarelr",
"lgr",
"udpipe",
"quanteda",
"keras",
"methods",
"stringr",
"reticulate",
"Rcpp",
"RcppArmadillo")
usethis::use_package("mlr3")
usethis::use_package("mlr3learners")
usethis::use_package("mlr3pipelines,")
devtools::check()
devtools::check()
devtools::check()
usethis::edit_r_buildignore("Trial")
usethis::edit_r_buildignore()
usethis::edit_r_buildignore("Trial")
devtools::load_all()
load(file="Trial/training_data.RData")
load("Trial/embeddings_bert_500.RData")
rownames(training_data)<-training_data$doc_id
test<-te_classifier$new(
classifier_title=paste("Test"),
classifier_version = "0.0.1",
classifier_algorithm="ranger",
learner_name="ranger",
additional_data = NULL,
use_smote = FALSE,
autotuning = FALSE,
smote_K = c(2,5),
smote_dup = c(floor(1349/11),floor(1349/108)),
text_embeddings=embeddings_bert_500,
target_data=training_data[rownames(embeddings_bert_500$embeddings),"basic_web"],
category_name = "basic_web",
category_label="basic_web",
normalize_input=FALSE,
normalize_output=FALSE,
n_performance_estimation=1,
ratio_performance_estimation=.66,
tuning_method="random_search",
tune_inner_sampling=mlr3::rsmp("subsampling", ratio= 0.75, repeats=1),
max_n_tuning=20,
cr_optim=mlr3::msr("classif.measureminiota2"),
#cr_optim=mlr3::msr("classif.measureavgiota2"),
filter_method="jmim",
filter_ratio=1,
verbose=TRUE,
logger_bbotk="info",
logger_mlr3="info",
na.rm=TRUE,
use_dim_reduction = TRUE,
dim_red_method = "PCA",
dim_red_n = 60
)
text_embedding_model<-TextEmbeddingModel$new(model_name="German Bert Large",
method = "bert",
#bert_model="deepset/gbert-large",
bert_model_dir_path="Trial/Bert_Modelle/",
model_version = "0.0.1",
model_language = "german",
max_length = 250,
chunks = 8,
overlap=50,
aggregation = "second_to_last",
trace=TRUE)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
multi_net_predict_c()
multi_net_predict_c
devtools::document()
multi_net_predict_c
multi_net_predict_c()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
devtools::load_all()
load(file="Trial/training_data.RData")
load("Trial/embeddings_bert_500.RData")
rownames(training_data)<-training_data$doc_id
test<-te_classifier$new(
classifier_title=paste("Test"),
classifier_version = "0.0.1",
classifier_algorithm="ranger",
learner_name="ranger",
additional_data = NULL,
use_smote = FALSE,
autotuning = FALSE,
smote_K = c(2,5),
smote_dup = c(floor(1349/11),floor(1349/108)),
text_embeddings=embeddings_bert_500,
target_data=training_data[rownames(embeddings_bert_500$embeddings),"basic_web"],
category_name = "basic_web",
category_label="basic_web",
normalize_input=FALSE,
normalize_output=FALSE,
n_performance_estimation=1,
ratio_performance_estimation=.66,
tuning_method="random_search",
tune_inner_sampling=mlr3::rsmp("subsampling", ratio= 0.75, repeats=1),
max_n_tuning=20,
cr_optim=mlr3::msr("classif.measureminiota2"),
#cr_optim=mlr3::msr("classif.measureavgiota2"),
filter_method="jmim",
filter_ratio=1,
verbose=TRUE,
logger_bbotk="info",
logger_mlr3="info",
na.rm=TRUE,
use_dim_reduction = TRUE,
dim_red_method = "PCA",
dim_red_n = 60
)
devtools::build()
devtools::check()
usethis::use_git_ignore("Trial")
usethis::use_git_remote()
usethis::use_git_remote("https://github.com/FBerding/aifeducation.git")
usethis::use_git_remote(url="https://github.com/FBerding/aifeducation.git")
usethis::use_git_remote(url="https://github.com/FBerding/aifeducation.git",overwrite = TRUE)
getwd()
devtools::load_all()
