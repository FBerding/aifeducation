% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/te_classifier_neuralnet_model.R
\name{te_classifier_neuralnet}
\alias{te_classifier_neuralnet}
\title{Text Embedding Classifier with a Neural Net}
\description{
Abtract class for neural nets with keras and
tensorflow
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{('character()')\cr
Name of the classifier.}

\item{\code{label}}{('character()')\cr
Label of the classifier used as the individual title.}

\item{\code{date}}{('date()')\cr
Date of the first creation of the classifier.}

\item{\code{text_embedding_model}}{('list()')\cr
List for storing information about the underlying text embedding model.
This information ensures that a classifier is only used with data from
the correct text embedding model and ensures the correct handling of the
embeddings.}

\item{\code{bundeled_model}}{('bundle object')\cr
Object for storing the keras model of the neural net. Saved as bundled
object with help of the package \link[bundle]{bundle} for serialization.}

\item{\code{model_config}}{('list()')\cr
List for storing information about the configuration of the model. This
information is used for predicting new data.}

\item{\code{model_config$n_gru}}{('integer()')\cr
Number of gru layers.}

\item{\code{model_config$n_hidden}}{('integer()')\cr
Number of dense layers.}

\item{\code{model_config$target_levels}}{('vector()')\cr
Levels of the target variable. Do not change this manually.}

\item{\code{model_config$input_variables}}{('vector()')\cr
Order and name of the input variables. Do not change this manually.}

\item{\code{model_config$init_config}}{('list()')\cr
List storing all parameters passed to method new().}

\item{\code{config}}{('list()')\cr
List for storing the history and the results of the last training. This
information will be overwritten if a new training is started.}

\item{\code{config$history}}{('keras_training_history')\cr
History of the last training.}

\item{\code{config$data}}{('table()')\cr
Object of class table storing the initial frequencies of the passed data.}

\item{\code{config$data_pbl}}{('matrix()')\cr
Matrix storing the number of additional cases (test and training) added
during balanced pseudo labeling. The rows refer to folds and final training.
The columns refer to the steps during pseudo labeling.}

\item{\code{config$data_bsc_train}}{('matrix()')\cr
Matrix storing the number of cases for each category used for training
during the phase of balanced synthetic units. Please note that the
frequencies include original and synthetic cases. In terms that the number
of original and synthetic cases exceeds the limit for the majority classes
the frequency represents the number of cases created by cluster analysis.}

\item{\code{config$data_bsc_test}}{('matrix()')\cr
Matrix storing the number of cases for each category used for testing
during the phase of balanced synthetic units. Please note that the
frequencies include original and synthetic cases. In terms that the number
of original and synthetic cases exceeds the limit for the majority classes
the frequency represents the number of cases created by cluster analysis.}

\item{\code{config$date}}{('date()')\cr
Time when the last training finished.}

\item{\code{config$date}}{('integer()')\cr
Number of folds in k-fold cross validation.}

\item{\code{config$config}}{('list()')\cr
List storing which kind of estimation was requested during last training.}

\item{\code{config$config$use_bsc}}{('bool()')\cr
\code{TRUE} if  balanced synthetic cases was requested. \code{FALSE}
if not.}

\item{\code{config$config$use_baseline}}{('bool()')\cr
\code{TRUE} if baseline estimation was requested. \code{FALSE}
if not.}

\item{\code{config$config$use_bpl}}{('bool()')\cr
\code{TRUE} if  balanced pseudo labeling cases was requested. \code{FALSE}
if not.}

\item{\code{reliability}}{('list()')\cr
List for storing central reliability measures of the last training.}

\item{\code{reliability$val_metric}}{('array()')\cr
Array containing the reliability measures for the validation data for
every fold, method, and step (in case of pseudo labeling).}

\item{\code{reliability$val_metric_mean}}{('array()')\cr
Array containing the reliability measures for the validation data for
every method and step (in case of pseudo labeling). The values represent
the mean values for every fold.}

\item{\code{reliability$raw_iota_objects}}{('list()')\cr
List containing all iota_object generated with the package \link[iotarelr]{iotarelr}
for every fold at the start and the end of the last training.}

\item{\code{reliability$raw_iota_objects$iota_objects_start}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the baseline model
for every fold.
If the estimation of the baseline model is not requested the list is
set to \code{NULL}.}

\item{\code{reliability$raw_iota_objects$iota_objects_end}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the final model
for every fold. Depending of the requested training method these values
refer to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.}

\item{\code{reliability$raw_iota_objects$iota_objects_start_free}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the baseline model
for every fold.
If the estimation of the baseline model is not requested the list is
set to \code{NULL}.Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}

\item{\code{reliability$raw_iota_objects$iota_objects_end_free}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the final model
for every fold. Depending of the requested training method these values
refer to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.
Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}

\item{\code{reliability$iota_object_start}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold. If the estimation of the baseline model is not requested the list is
set to \code{NULL}.}

\item{\code{reliability$iota_object_start_free}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold. If the estimation of the baseline model is not requested the list is
set to \code{NULL}.
Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}

\item{\code{reliability$iota_object_end}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold.
Depending of the requested training method this object
refers to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.}

\item{\code{reliability$iota_object_end_free}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold.
Depending of the requested training method this object
refers to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.
Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{model_config$n_gru}}{('integer()')\cr
Number of gru layers.}

\item{\code{model_config$n_hidden}}{('integer()')\cr
Number of dense layers.}

\item{\code{model_config$target_levels}}{('vector()')\cr
Levels of the target variable. Do not change this manually.}

\item{\code{model_config$input_variables}}{('vector()')\cr
Order and name of the input variables. Do not change this manually.}

\item{\code{model_config$init_config}}{('list()')\cr
List storing all parameters passed to method new().}

\item{\code{config}}{('list()')\cr
List for storing the history and the results of the last training. This
information will be overwritten if a new training is started.}

\item{\code{config$history}}{('keras_training_history')\cr
History of the last training.}

\item{\code{config$data}}{('table()')\cr
Object of class table storing the initial frequencies of the passed data.}

\item{\code{config$data_pbl}}{('matrix()')\cr
Matrix storing the number of additional cases (test and training) added
during balanced pseudo labeling. The rows refer to folds and final training.
The columns refer to the steps during pseudo labeling.}

\item{\code{config$data_bsc_train}}{('matrix()')\cr
Matrix storing the number of cases for each category used for training
during the phase of balanced synthetic units. Please note that the
frequencies include original and synthetic cases. In terms that the number
of original and synthetic cases exceeds the limit for the majority classes
the frequency represents the number of cases created by cluster analysis.}

\item{\code{config$data_bsc_test}}{('matrix()')\cr
Matrix storing the number of cases for each category used for testing
during the phase of balanced synthetic units. Please note that the
frequencies include original and synthetic cases. In terms that the number
of original and synthetic cases exceeds the limit for the majority classes
the frequency represents the number of cases created by cluster analysis.}

\item{\code{config$date}}{('date()')\cr
Time when the last training finished.}

\item{\code{config$date}}{('integer()')\cr
Number of folds in k-fold cross validation.}

\item{\code{config$config}}{('list()')\cr
List storing which kind of estimation was requested during last training.}

\item{\code{config$config$use_bsc}}{('bool()')\cr
\code{TRUE} if  balanced synthetic cases was requested. \code{FALSE}
if not.}

\item{\code{config$config$use_baseline}}{('bool()')\cr
\code{TRUE} if baseline estimation was requested. \code{FALSE}
if not.}

\item{\code{config$config$use_bpl}}{('bool()')\cr
\code{TRUE} if  balanced pseudo labeling cases was requested. \code{FALSE}
if not.}

\item{\code{reliability$val_metric}}{('array()')\cr
Array containing the reliability measures for the validation data for
every fold, method, and step (in case of pseudo labeling).}

\item{\code{reliability$val_metric_mean}}{('array()')\cr
Array containing the reliability measures for the validation data for
every method and step (in case of pseudo labeling). The values represent
the mean values for every fold.}

\item{\code{reliability$raw_iota_objects}}{('list()')\cr
List containing all iota_object generated with the package \link[iotarelr]{iotarelr}
for every fold at the start and the end of the last training.}

\item{\code{reliability$raw_iota_objects$iota_objects_start}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the baseline model
for every fold.
If the estimation of the baseline model is not requested the list is
set to \code{NULL}.}

\item{\code{reliability$raw_iota_objects$iota_objects_end}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the final model
for every fold. Depending of the requested training method these values
refer to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.}

\item{\code{reliability$raw_iota_objects$iota_objects_start_free}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the baseline model
for every fold.
If the estimation of the baseline model is not requested the list is
set to \code{NULL}.Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}

\item{\code{reliability$raw_iota_objects$iota_objects_end_free}}{('list()')\cr
List of objects with class \code{iotarelr_iota2} containing the
estimated iota reliability of the second generation for the final model
for every fold. Depending of the requested training method these values
refer to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.
Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}

\item{\code{reliability$iota_object_start}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold. If the estimation of the baseline model is not requested the list is
set to \code{NULL}.}

\item{\code{reliability$iota_object_start_free}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold. If the estimation of the baseline model is not requested the list is
set to \code{NULL}.
Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}

\item{\code{reliability$iota_object_end}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold.
Depending of the requested training method this object
refers to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.}

\item{\code{reliability$iota_object_end_free}}{('iotarelr_iota2')\cr
Object of class \code{iotarelr_iota2} as a mean of the individual objects
for every fold.
Depending of the requested training method this object
refers to the baseline model, a trained model on the basis of balanced
synthetic cases, balanced pseudo labeling or a combination of balanced
synthetic cases with pseudo labeling.
Please note that the model is estimated without
forcing the Assignment Error Matrix to be in line with the assumption of weak superiority.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TextEmbeddingClassifierNeuralNet-new}{\code{te_classifier_neuralnet$new()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-train}{\code{te_classifier_neuralnet$train()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-predict}{\code{te_classifier_neuralnet$predict()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-set_publication_info}{\code{te_classifier_neuralnet$set_publication_info()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-get_publication_info}{\code{te_classifier_neuralnet$get_publication_info()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-set_license}{\code{te_classifier_neuralnet$set_license()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-get_license}{\code{te_classifier_neuralnet$get_license()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-set_model_description}{\code{te_classifier_neuralnet$set_model_description()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-get_model_description}{\code{te_classifier_neuralnet$get_model_description()}}
\item \href{#method-TextEmbeddingClassifierNeuralNet-clone}{\code{te_classifier_neuralnet$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-new"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-new}{}}}
\subsection{Method \code{new()}}{
Creating a new instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$new(
  name = NULL,
  label = NULL,
  text_embeddings = NULL,
  targets = NULL,
  config = list(hidden = c(500, 250, 100), gru = c(500), dropout = 0.1, recurrent_dropout
    = 0, l2_regularizer = 0.001, optimizer = keras::optimizer_adam(), act_fct = "gelu",
    act_fct_last = "softmax", err_fct = "categorical_crossentropy")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{\code{Character} Name of the new classifier. Please refer to
common name conventions. Free text can be used with parameter \code{label}.}

\item{\code{label}}{\code{Character} Label for the new classifier. Here you can use
free text.}

\item{\code{text_embeddings}}{An object of class\code{TextEmbeddingModel}.}

\item{\code{targets}}{\code{factor} containing the target values of the classifier.}

\item{\code{config}}{\code{list} containing the configuration of the neural net.}

\item{\code{config$hidden}}{\code{vector} containing the number of neurons for each dense layer.
The length of the vector determines the number of dense layers. If you want no dense layer
set this parameter to \code{NULL}.}

\item{\code{config$gru}}{\code{vector} containing the number of neurons for each gru layer.
The length of the vector determines the number of dense layers. If you want no dense layer
set this parameter to \code{NULL}.}

\item{\code{config$dropout}}{\code{double} ranging between 0 and lower 1 determining the
dropout for each gru layer.}

\item{\code{config$recurrent_dropout}}{\code{double} ranging between 0 and lower 1 determining the
recurrent dropout for each gru layer.}

\item{\code{l2_regularizer}}{\code{double} determining the l2 regularizer for every dense layer.}

\item{\code{optimizer}}{Object of class \code{keras.optimizers}.}

\item{\code{act_fct}}{\code{character} naming the activation function for all dense layers.}

\item{\code{act_fct_last}}{\code{character} naming the activation function for the last dense layers.}

\item{\code{err_fct}}{\code{character} naming the loss/error function for the neural net.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-train"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-train}{}}}
\subsection{Method \code{train()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$train(
  data_embeddings,
  data_targets,
  data_n_valid_samples = 10,
  use_baseline = TRUE,
  use_bsc = TRUE,
  bsc_methods = c("smote", "dbsmote", "adas"),
  bsc_max_k = 10,
  bsc_limit_factor = 3,
  use_bpl = TRUE,
  bpl_max_steps = 5,
  bpl_anchor = 0.66,
  bpl_valid_size = 0.33,
  opt_model_reset = FALSE,
  epochs = 100,
  batch_size = 32,
  rel_tolerance = 1e-04,
  dir_checkpoint,
  trace = TRUE,
  view_metrics = FALSE,
  n_cores = 2
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-predict"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-predict}{}}}
\subsection{Method \code{predict()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$predict(newdata)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-set_publication_info"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-set_publication_info}{}}}
\subsection{Method \code{set_publication_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$set_publication_info(
  type,
  autors,
  citation,
  url = NULL
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-get_publication_info"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-get_publication_info}{}}}
\subsection{Method \code{get_publication_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$get_publication_info()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-set_license"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-set_license}{}}}
\subsection{Method \code{set_license()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$set_license(license)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-get_license"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-get_license}{}}}
\subsection{Method \code{get_license()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$get_license()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-set_model_description"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-set_model_description}{}}}
\subsection{Method \code{set_model_description()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$set_model_description(eng = NULL, native = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-get_model_description"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-get_model_description}{}}}
\subsection{Method \code{get_model_description()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$get_model_description()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TextEmbeddingClassifierNeuralNet-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TextEmbeddingClassifierNeuralNet-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{te_classifier_neuralnet$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
